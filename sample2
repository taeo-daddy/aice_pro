{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1WQ7HgFx9K3Pqhoxzh4kXzehP0waRajYg","timestamp":1750050342813},{"file_id":"1DBRsQFJs4DGgs-Gs8X-gC9XUk0rkwCZj","timestamp":1749714166452}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# AICE Professional 시험 준비하면서 작성했던 코드에 주석을 달았습니다.\n","\n","1. Tabular 데이터 Brain stroke prediction dataset\n","- 데이터 출처 : https://www.kaggle.com/datasets/zzettrkalpakbal/full-filled-brain-stroke-dataset\n","2. Text 데이터 Twitter Sentiment\n","- 데이터 출처 : https://www.kaggle.com/datasets/jp797498e/twitter-entity-sentiment-analysis\n","3. Img 데이터 Flower_Classification_5class\n","- 데이터 출처 : https://www.kaggle.com/datasets/sauravagarwal/flower-classification"],"metadata":{"id":"toHcQHkjiMjy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"dvTR4LpQKXAJ"},"outputs":[],"source":["# 라이브러리 임포트\n","import os\n","import glob\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import tensorflow as tf"]},{"cell_type":"code","source":["# 딥러닝 라이브러리 임포트\n","from tensorflow.keras.models import Sequential, load_model\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization, Activation, Flatten\n","from tensorflow.keras.layers import Embedding, LSTM, Bidirectional\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint"],"metadata":{"id":"1MapSeZbKu0d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# AICE Professional-1 Tabular 데이터 분류 모델 만들기"],"metadata":{"id":"zxFgoQDcvaPG"}},{"cell_type":"code","source":["# Tabular traindata.csv 불러오기\n","# df = pd.read_csv('full_data_training.csv')\n","# 시험에서는 위와 비슷한 명칭으로 데이터를 불러서 사용합니다.\n","\n","df = pd.read_csv('https://raw.githubusercontent.com/suku-7/AICE-Pro-share/refs/heads/main/brain_stroke_data_training.csv')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"Jb6v40v2K7sm","outputId":"30d070a0-95e2-4851-d47b-94f938d7dce6","executionInfo":{"status":"ok","timestamp":1749711520740,"user_tz":-540,"elapsed":429,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      gender   age  hypertension  heart_disease ever_married      work_type  \\\n","0       Male  67.0             0              1          Yes        Private   \n","1       Male  80.0             0              1          Yes        Private   \n","2     Female  49.0             0              0          Yes        Private   \n","3     Female  79.0             1              0          Yes  Self-employed   \n","4       Male  81.0             0              0          Yes        Private   \n","...      ...   ...           ...            ...          ...            ...   \n","4976    Male  41.0             0              0           No        Private   \n","4977    Male  40.0             0              0          Yes        Private   \n","4978  Female  45.0             1              0          Yes       Govt_job   \n","4979    Male  40.0             0              0          Yes        Private   \n","4980  Female  80.0             1              0          Yes        Private   \n","\n","     Residence_type  avg_glucose_level   bmi   smoking_status  stroke  \n","0             Urban             228.69  36.6  formerly smoked       1  \n","1             Rural             105.92  32.5     never smoked       1  \n","2             Urban             171.23  34.4           smokes       1  \n","3             Rural             174.12  24.0     never smoked       1  \n","4             Urban             186.21  29.0  formerly smoked       1  \n","...             ...                ...   ...              ...     ...  \n","4976          Rural              70.15  29.8  formerly smoked       0  \n","4977          Urban             191.15  31.1           smokes       0  \n","4978          Rural              95.02  31.8           smokes       0  \n","4979          Rural              83.94  30.0           smokes       0  \n","4980          Urban              83.75  29.1     never smoked       0  \n","\n","[4981 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-6943ebcd-1403-4bac-a7c3-f3248f64ceba\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Male</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>228.69</td>\n","      <td>36.6</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>105.92</td>\n","      <td>32.5</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Female</td>\n","      <td>49.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>171.23</td>\n","      <td>34.4</td>\n","      <td>smokes</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Female</td>\n","      <td>79.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>174.12</td>\n","      <td>24.0</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Male</td>\n","      <td>81.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>186.21</td>\n","      <td>29.0</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4976</th>\n","      <td>Male</td>\n","      <td>41.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>70.15</td>\n","      <td>29.8</td>\n","      <td>formerly smoked</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4977</th>\n","      <td>Male</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>191.15</td>\n","      <td>31.1</td>\n","      <td>smokes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4978</th>\n","      <td>Female</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Govt_job</td>\n","      <td>Rural</td>\n","      <td>95.02</td>\n","      <td>31.8</td>\n","      <td>smokes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4979</th>\n","      <td>Male</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>83.94</td>\n","      <td>30.0</td>\n","      <td>smokes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4980</th>\n","      <td>Female</td>\n","      <td>80.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>83.75</td>\n","      <td>29.1</td>\n","      <td>never smoked</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4981 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6943ebcd-1403-4bac-a7c3-f3248f64ceba')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6943ebcd-1403-4bac-a7c3-f3248f64ceba button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6943ebcd-1403-4bac-a7c3-f3248f64ceba');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2bd12b16-abfd-4002-9f13-a035337c5bcb\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2bd12b16-abfd-4002-9f13-a035337c5bcb')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2bd12b16-abfd-4002-9f13-a035337c5bcb button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_56966a85-1d30-45c3-b51c-440c35717276\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_56966a85-1d30-45c3-b51c-440c35717276 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4981,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.662755073698474,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          70.0,\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Self-employed\",\n          \"children\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.07537280843003,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3895,\n        \"samples\": [\n          106.69,\n          95.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.790463626292727,\n        \"min\": 14.0,\n        \"max\": 48.9,\n        \"num_unique_values\": 342,\n        \"samples\": [\n          17.5,\n          20.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# Tabular 데이터 정보 확인\n","# 위의 df와 비교하면서 값하고 Dtype이 다른 부분이 있는지 확인\n","# 결측치 확인, 데이터 컬럼의 용도 확인\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"glq55IJVLLs8","outputId":"82fcbdda-5a79-4926-9172-34b6eeae11b2","executionInfo":{"status":"ok","timestamp":1749711527160,"user_tz":-540,"elapsed":43,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4981 entries, 0 to 4980\n","Data columns (total 11 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   gender             4981 non-null   object \n"," 1   age                4981 non-null   float64\n"," 2   hypertension       4981 non-null   int64  \n"," 3   heart_disease      4981 non-null   int64  \n"," 4   ever_married       4981 non-null   object \n"," 5   work_type          4981 non-null   object \n"," 6   Residence_type     4981 non-null   object \n"," 7   avg_glucose_level  4981 non-null   float64\n"," 8   bmi                4981 non-null   float64\n"," 9   smoking_status     4981 non-null   object \n"," 10  stroke             4981 non-null   int64  \n","dtypes: float64(3), int64(3), object(5)\n","memory usage: 428.2+ KB\n"]}]},{"cell_type":"code","source":["# Tabular 데이터 전처리 - 라벨 인코딩\n","df['gender'] = np.where(df['gender']=='Male', 1, 0)\n","df['ever_married'] = np.where(df['ever_married']=='Yes', 1, 0)"],"metadata":{"id":"drgn_RtXLLvy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular 데이터 전처리 - 결측치 확인\n","df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"BBMqPA2SLLqV","outputId":"54a87db0-8c1f-4ae4-a539-02bb1b4c192d","executionInfo":{"status":"ok","timestamp":1749711639591,"user_tz":-540,"elapsed":14,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender               0\n","age                  0\n","hypertension         0\n","heart_disease        0\n","ever_married         0\n","work_type            0\n","Residence_type       0\n","avg_glucose_level    0\n","bmi                  0\n","smoking_status       0\n","stroke               0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Tabular 데이터 전처리 - 원 핫 인코딩, object인 데이터만 분류\n","obj_col = df.select_dtypes('object').columns\n","obj_col"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HI4LfBm8LLnq","outputId":"a34e8836-edec-4b46-c1e4-aa067f938a51","executionInfo":{"status":"ok","timestamp":1749711650543,"user_tz":-540,"elapsed":45,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['work_type', 'Residence_type', 'smoking_status'], dtype='object')"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Tabular 데이터 전처리 - 원 핫 인코딩\n","df = pd.get_dummies(data=df, columns=obj_col, drop_first=True)"],"metadata":{"id":"9p6F4sDRLLkx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular 데이터 컬럼 변경사항 확인\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yhd4jw_ULtFl","outputId":"b0e97fa7-c6e3-43a3-f685-8944110df765","executionInfo":{"status":"ok","timestamp":1749711715077,"user_tz":-540,"elapsed":6,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4981 entries, 0 to 4980\n","Data columns (total 15 columns):\n"," #   Column                          Non-Null Count  Dtype  \n","---  ------                          --------------  -----  \n"," 0   gender                          4981 non-null   int64  \n"," 1   age                             4981 non-null   float64\n"," 2   hypertension                    4981 non-null   int64  \n"," 3   heart_disease                   4981 non-null   int64  \n"," 4   ever_married                    4981 non-null   int64  \n"," 5   avg_glucose_level               4981 non-null   float64\n"," 6   bmi                             4981 non-null   float64\n"," 7   stroke                          4981 non-null   int64  \n"," 8   work_type_Private               4981 non-null   bool   \n"," 9   work_type_Self-employed         4981 non-null   bool   \n"," 10  work_type_children              4981 non-null   bool   \n"," 11  Residence_type_Urban            4981 non-null   bool   \n"," 12  smoking_status_formerly smoked  4981 non-null   bool   \n"," 13  smoking_status_never smoked     4981 non-null   bool   \n"," 14  smoking_status_smokes           4981 non-null   bool   \n","dtypes: bool(7), float64(3), int64(5)\n","memory usage: 345.5 KB\n"]}]},{"cell_type":"code","source":["# Tabular 데이터 feature, label 분류\n","features = df.drop('stroke', axis=1)\n","labels = df['stroke']"],"metadata":{"id":"NkPWueLrLLhp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#label\n","labels.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"KgOg3VKAMi6e","outputId":"fa44d631-67b3-41c6-9723-6ec722eb927f","executionInfo":{"status":"ok","timestamp":1749711782701,"user_tz":-540,"elapsed":3,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["stroke\n","0    4733\n","1     248\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4733</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>248</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Tabular 데이터 Train, valid 데이터셋 분할\n","\n","from sklearn.model_selection import train_test_split\n","x_train, x_valid, y_train, y_valid = train_test_split(features, labels, test_size=0.2, random_state=42, stratify=labels)\n","x_train.shape, x_valid.shape, y_train.shape, y_valid.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e_EIxmIwLLe-","outputId":"b7fe6498-25aa-4b09-8a60-ef8bef009659","executionInfo":{"status":"ok","timestamp":1749711901372,"user_tz":-540,"elapsed":25,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((3984, 14), (997, 14), (3984,), (997,))"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# 라이브러리 임포트\n","\"\"\"\n","머신러닝 분류 모델의 경우 아래의 것들이 성능이 좋았어서 이것들만 사용했습니다.\n","LogisticRegression 이 연산 속도가 빨라서 먼저 실행해보고서 어느정도의 성능이 나오는지 보고\n","성능이 부족한거 같으면 RandomForestClassifier와 DecisionTreeClassifier를 사용했습니다.\n","딥러닝 분류 모델도 만들어서 모델 성능을 비교하고 마지막에 골라서 제출했습니다.\n","머신러닝 회귀 모델의 경우 DecisionTreeRegressor, RandomForestRegressor, 딥러닝 CNN 모델만 사용했습니다.\n","\"\"\"\n","from sklearn.linear_model import LogisticRegression, SGDClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier"],"metadata":{"id":"fblGyttrLLcL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular LogisticRegression 머신러닝 모델 분류 성능 확인\n","lgr = LogisticRegression()\n","lgr.fit(x_train, y_train)\n","lgr.score(x_valid, y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTwT4Z6LLLZa","outputId":"da034323-5694-44d5-df12-8b77bf10d529","executionInfo":{"status":"ok","timestamp":1749711937967,"user_tz":-540,"elapsed":127,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9498495486459378"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# Tabular SGDClassifier 머신러닝 모델 분류 성능 확인\n","sgdc = SGDClassifier()\n","sgdc.fit(x_train, y_train)\n","sgdc.score(x_valid, y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KZ2yYfDSLLWo","outputId":"034147ba-57dd-45fd-fcc5-ab5c69dfd187","executionInfo":{"status":"ok","timestamp":1749711973670,"user_tz":-540,"elapsed":21,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9017051153460381"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# Tabular DecisionTreeClassifier 머신러닝 모델 분류 성능 확인\n","dtc = DecisionTreeClassifier()\n","dtc.fit(x_train, y_train)\n","dtc.score(x_valid, y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gGOpO5ZbLLT2","outputId":"57120e88-ed0d-465b-b27c-5f585f2af35c","executionInfo":{"status":"ok","timestamp":1749711975019,"user_tz":-540,"elapsed":20,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9037111334002006"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# Tabular RandomForestClassifier 머신러닝 모델 분류 성능 확인\n","rfc = RandomForestClassifier()\n","rfc.fit(x_train, y_train)\n","rfc.score(x_valid, y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zOlkOwPELLRP","outputId":"1634b507-5025-4eda-d217-6a79a7f52c15","executionInfo":{"status":"ok","timestamp":1749711977057,"user_tz":-540,"elapsed":368,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9468405215646941"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# Tabular 딥러닝 모델\n","model = Sequential()\n","model.add(Dense(128, activation='relu', input_shape=(x_train.shape[-1], )))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dropout(0.3))\n","model.add(Dense(32, activation='relu'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Dense(2, activation='softmax')) #저는 2개 분류~여러개 분류 모두 softmax로 통일해서 사용했습니다."],"metadata":{"id":"_XlvrkdsMUAm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e09d8876-d981-47d5-8ce4-c7a66abd2517","executionInfo":{"status":"ok","timestamp":1749712206963,"user_tz":-540,"elapsed":3101,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"code","source":["# Tabular 딥러닝 모델 compile\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(0.001),\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")"],"metadata":{"id":"y6vzuFDlMT9z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular 딥러닝 모델 훈련 fit\n","# Tabular는 es, mc, history에 숫자를 붙이지 않고 사용했습니다.\n","# 같은 코드 안에서 3개의 모델을 만들어서 비슷한 변수명에 숫자나, text, img를 붙였습니다.\n","\n","\n","es = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True, verbose=1)\n","mc = ModelCheckpoint('best_model.keras', monitor='val_loss', save_best_only=True, verbose=1)\n","\n","history = model.fit(\n","    x_train, y_train,\n","    epochs=10,\n","    validation_data=(x_valid, y_valid),\n","    callbacks=[es, mc],\n","    verbose=1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NBkuq5QXMT7B","outputId":"bd90766f-6a04-47be-c6aa-6859b76a3bbd","executionInfo":{"status":"ok","timestamp":1749712411407,"user_tz":-540,"elapsed":12263,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5457 - loss: 0.8668\n","Epoch 1: val_loss improved from inf to 0.30950, saving model to best_model.keras\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 23ms/step - accuracy: 0.5465 - loss: 0.8655 - val_accuracy: 0.9498 - val_loss: 0.3095\n","Epoch 2/10\n","\u001b[1m113/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8701 - loss: 0.3780\n","Epoch 2: val_loss improved from 0.30950 to 0.25438, saving model to best_model.keras\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8726 - loss: 0.3744 - val_accuracy: 0.9498 - val_loss: 0.2544\n","Epoch 3/10\n","\u001b[1m109/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9310 - loss: 0.2706\n","Epoch 3: val_loss improved from 0.25438 to 0.19375, saving model to best_model.keras\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9315 - loss: 0.2682 - val_accuracy: 0.9498 - val_loss: 0.1938\n","Epoch 4/10\n","\u001b[1m115/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9385 - loss: 0.2296\n","Epoch 4: val_loss improved from 0.19375 to 0.18133, saving model to best_model.keras\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9388 - loss: 0.2295 - val_accuracy: 0.9498 - val_loss: 0.1813\n","Epoch 5/10\n","\u001b[1m110/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9507 - loss: 0.1980\n","Epoch 5: val_loss improved from 0.18133 to 0.17310, saving model to best_model.keras\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9498 - loss: 0.1997 - val_accuracy: 0.9498 - val_loss: 0.1731\n","Epoch 6/10\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9519 - loss: 0.1955\n","Epoch 6: val_loss did not improve from 0.17310\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9519 - loss: 0.1956 - val_accuracy: 0.9498 - val_loss: 0.1763\n","Epoch 7/10\n","\u001b[1m112/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9432 - loss: 0.2026\n","Epoch 7: val_loss did not improve from 0.17310\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9432 - loss: 0.2029 - val_accuracy: 0.9498 - val_loss: 0.1779\n","Epoch 8/10\n","\u001b[1m122/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9377 - loss: 0.2284\n","Epoch 8: val_loss did not improve from 0.17310\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9379 - loss: 0.2278 - val_accuracy: 0.9498 - val_loss: 0.1827\n","Epoch 9/10\n","\u001b[1m113/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9551 - loss: 0.1727\n","Epoch 9: val_loss did not improve from 0.17310\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9543 - loss: 0.1749 - val_accuracy: 0.9498 - val_loss: 0.1740\n","Epoch 10/10\n","\u001b[1m113/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9400 - loss: 0.2051\n","Epoch 10: val_loss improved from 0.17310 to 0.17198, saving model to best_model.keras\n","\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9406 - loss: 0.2039 - val_accuracy: 0.9498 - val_loss: 0.1720\n","Restoring model weights from the end of the best epoch: 10.\n"]}]},{"cell_type":"code","source":["# Tabular test 데이터셋.csv 읽기\n","#df5 = pd.read_csv('full_data_validation.csv')\n","# 시험에서는 위와 비슷한 명칭으로 데이터를 불러서 사용합니다.\n","\n","df5 = pd.read_csv('https://raw.githubusercontent.com/suku-7/AICE-Pro-share/refs/heads/main/brain_stroke_data_validation.csv')\n","df5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"k__9oZ15MT4B","outputId":"963ac3e3-c652-43b7-a844-743b4a62c6c4","executionInfo":{"status":"ok","timestamp":1749712426833,"user_tz":-540,"elapsed":214,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender   age  hypertension  heart_disease ever_married      work_type  \\\n","0    Female  61.0             0              0          Yes  Self-employed   \n","1    Female  59.0             0              0          Yes        Private   \n","2      Male  78.0             0              1          Yes        Private   \n","3      Male  57.0             0              1           No       Govt_job   \n","4      Male  58.0             0              0          Yes        Private   \n","..      ...   ...           ...            ...          ...            ...   \n","196    Male  41.0             0              0           No        Private   \n","197    Male  40.0             0              0          Yes        Private   \n","198  Female  45.0             1              0          Yes       Govt_job   \n","199    Male  40.0             0              0          Yes        Private   \n","200  Female  80.0             1              0          Yes        Private   \n","\n","    Residence_type  avg_glucose_level        bmi   smoking_status  stroke  \n","0            Rural             202.21  31.555602     never smoked       1  \n","1            Rural              76.15  30.242937          Unknown       1  \n","2            Urban             219.84  30.698951          Unknown       1  \n","3            Urban             217.08  33.808410          Unknown       1  \n","4            Rural             189.84  31.378534          Unknown       1  \n","..             ...                ...        ...              ...     ...  \n","196          Rural              70.15  29.756631  formerly smoked       0  \n","197          Urban             191.15  31.124172           smokes       0  \n","198          Rural              95.02  31.798304           smokes       0  \n","199          Rural              83.94  29.951301           smokes       0  \n","200          Urban              83.75  29.097421     never smoked       0  \n","\n","[201 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-c0431d47-2528-4bdf-95b4-49c9f31342df\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Female</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>202.21</td>\n","      <td>31.555602</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Female</td>\n","      <td>59.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>76.15</td>\n","      <td>30.242937</td>\n","      <td>Unknown</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Male</td>\n","      <td>78.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>219.84</td>\n","      <td>30.698951</td>\n","      <td>Unknown</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Male</td>\n","      <td>57.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>Govt_job</td>\n","      <td>Urban</td>\n","      <td>217.08</td>\n","      <td>33.808410</td>\n","      <td>Unknown</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Male</td>\n","      <td>58.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>189.84</td>\n","      <td>31.378534</td>\n","      <td>Unknown</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>Male</td>\n","      <td>41.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>70.15</td>\n","      <td>29.756631</td>\n","      <td>formerly smoked</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>Male</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>191.15</td>\n","      <td>31.124172</td>\n","      <td>smokes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>Female</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Govt_job</td>\n","      <td>Rural</td>\n","      <td>95.02</td>\n","      <td>31.798304</td>\n","      <td>smokes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>Male</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>83.94</td>\n","      <td>29.951301</td>\n","      <td>smokes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>Female</td>\n","      <td>80.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>83.75</td>\n","      <td>29.097421</td>\n","      <td>never smoked</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>201 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0431d47-2528-4bdf-95b4-49c9f31342df')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c0431d47-2528-4bdf-95b4-49c9f31342df button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c0431d47-2528-4bdf-95b4-49c9f31342df');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8c92da06-e259-44fd-93fa-0c75ee7b797c\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c92da06-e259-44fd-93fa-0c75ee7b797c')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8c92da06-e259-44fd-93fa-0c75ee7b797c button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_fdebcc92-2ceb-42aa-8f07-04d0ca055564\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df5')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fdebcc92-2ceb-42aa-8f07-04d0ca055564 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df5');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df5","summary":"{\n  \"name\": \"df5\",\n  \"rows\": 201,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.27618126567241,\n        \"min\": 0.48,\n        \"max\": 82.0,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          58.0,\n          53.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Private\",\n          \"children\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Urban\",\n          \"Rural\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.24032210399497,\n        \"min\": 57.52,\n        \"max\": 260.85,\n        \"num_unique_values\": 199,\n        \"samples\": [\n          81.43,\n          101.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3630978358910584,\n        \"min\": 17.89929451491795,\n        \"max\": 35.18860462517498,\n        \"num_unique_values\": 179,\n        \"samples\": [\n          32.05850252051601,\n          30.19957056534973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Unknown\",\n          \"smokes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["\"\"\"\n","위의 train, valid 데이터와 동일하게 대부분 데이터 전처리를 수행합니다.\n","훈련 데이터 셋에서는 중복, 결측치를 제거해서 모델의 분류 성능을 올려야 하지만,\n","테스트 데이터셋의 갯수를 줄이는 것은 (중복 삭제, 결측치 제거)는 하면 안됩니다.\n","저는 실습하다가 무의식적으로 하다가 지운 경우가 많았던거 같습니다.\n","\"\"\"\n","# Tabular test 데이터 전처리 - 라벨 인코딩\n","df5['gender'] = np.where(df5['gender']=='Male', 1, 0)\n","df5['ever_married'] = np.where(df5['ever_married']=='Yes', 1, 0)\n","df5.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"fePJ1S66NLPP","outputId":"b5d16a5d-f906-46e6-fe94-0a54d2a4e88c","executionInfo":{"status":"ok","timestamp":1749712434795,"user_tz":-540,"elapsed":8,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender               0\n","age                  0\n","hypertension         0\n","heart_disease        0\n","ever_married         0\n","work_type            0\n","Residence_type       0\n","avg_glucose_level    0\n","bmi                  0\n","smoking_status       0\n","stroke               0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Tabular Test 데이터 전처리 - 원 핫 인코딩\n","obj_col2 = df5.select_dtypes('object').columns\n","df5 = pd.get_dummies(data=df5, columns=obj_col2, drop_first=True)"],"metadata":{"id":"BlNZnUxWMT1V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular Test 데이터 feature, label 분류\n","x_test = df5.drop('stroke', axis=1)\n","y_test = df5['stroke']"],"metadata":{"id":"tSs-c3HaMTyX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular Test 데이터로 머신러닝, 딥러닝 모델 성능 예측\n","lgr_y_pred = lgr.predict(x_test)\n","sgdc_y_pred = sgdc.predict(x_test)\n","dtc_y_pred = dtc.predict(x_test)\n","rfc_y_pred = rfc.predict(x_test)\n","model_y_pred = model.predict(x_test)\n","model_y_pred = np.argmax(model_y_pred, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kcQmnlnIMTvN","outputId":"3a57b593-bb55-4037-e7c3-b94d34214722","executionInfo":{"status":"ok","timestamp":1749712528701,"user_tz":-540,"elapsed":687,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 67ms/step\n"]}]},{"cell_type":"code","source":["lgr_y_pred, sgdc_y_pred, dtc_y_pred, rfc_y_pred, model_y_pred, model_y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XHxlhYMe_-Lz","executionInfo":{"status":"ok","timestamp":1749712653301,"user_tz":-540,"elapsed":7,"user":{"displayName":"오두연","userId":"08076594044575291200"}},"outputId":"5686754e-d925-44b7-8e06-f75e720c0c53"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0]),\n"," array([0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,\n","        0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n","        0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n","        0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 1]),\n"," array([0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0]),\n"," array([0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0]),\n"," array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0]),\n"," array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0]))"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["\"\"\"\n","시험에서는 TestDataset에 대한 라벨이 부여되지 않아 아래와 같이 확인이 가능하지 않습니다.\n","현재 테스트 데이터셋은 라벨도 있고, 모델 성능이 비슷해보여서 비교하는 과정을 가졌습니다.\n","\n","LogisticRegression 훈련 데이터셋 성능: 0.9498 (95%)\n","SGDClassifier 훈련 데이터셋 성능: 0.9498 (95%)\n","DecisionTreeClassifier 훈련 데이터셋 성능: 0.9067 (91%)\n","RandomForestClassifier 훈련 데이터셋 성능: 0.9478 (95%)\n","딥러닝 모델 훈련 데이터셋 성능: 0.9498 (95%)\n","\n","시험 환경이었다면 모델성능이 비슷하다고 느껴지면\n","다른 실습 과정에서도 대부분 좋은 성능을 내는건 아래의 두 모델이라\n","RandomForestClassifier, 딥러닝 모델중 하나를 제출했을거 같습니다.\n","\n","\"\"\""],"metadata":{"id":"2OWvO1DysOnK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular 데이터 분류 시각화\n","from sklearn.metrics import classification_report, confusion_matrix"],"metadata":{"id":"tz9Kq2FKMTss"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Logistic Regression 모델 성능 - 모델이 다 0을 예측해서 좋은거처럼 보였던거 같네요\n","cm = confusion_matrix(y_test, lgr_y_pred)\n","sns.heatmap(data=cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"C83G31GqMTqF","outputId":"376e9375-d2e4-454d-c4ed-6cbc27ad9267","executionInfo":{"status":"ok","timestamp":1749712695167,"user_tz":-540,"elapsed":122,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# SGDC Classifier 모델 성능 - 훈련이 잘못된거 같아요.\n","cm = confusion_matrix(y_test, sgdc_y_pred)\n","sns.heatmap(data=cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"u_fNBbeGMTnY","outputId":"a86de8c8-3a56-4f77-a414-31b033ff6004"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# DecisionTreeClassifier 모델 성능 - 오 분류 성능이 꽤 좋아보입니다.\n","cm = confusion_matrix(y_test, dtc_y_pred)\n","sns.heatmap(data=cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"uGurlab0LLOj","outputId":"1e45117b-c365-49ac-c17b-1369891e589e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# RandomForestClassifier 모델 성능 - 오 분류 성능이 꽤 좋아보입니다. DecisionTree와 비슷한 성능인거 같네요.\n","cm = confusion_matrix(y_test, rfc_y_pred)\n","sns.heatmap(data=cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"agNKtywXLLLz","outputId":"c4bdb21d-a480-441b-ac24-47525d456f35"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 딥러닝 모델 성능 - 모델이 다 0을 예측해서 좋은거처럼 보였던거 같네요\n","cm = confusion_matrix(y_test, model_y_pred)\n","sns.heatmap(data=cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"yWBzHUrSLLJU","outputId":"013bb8da-b988-42c2-bde2-cf027e91d846"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 모델중에 가장 성능이 좋아보이는 DecisionTreeClassifier의 예측값을 테스트 데이터셋 csv에 추가\n","df5['pred'] = rfc_y_pred\n","df5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"zQ4Woe4TN1YI","outputId":"9c7c488c-1b30-4398-9658-d78ce4ef5444","executionInfo":{"status":"ok","timestamp":1749712750574,"user_tz":-540,"elapsed":70,"user":{"displayName":"오두연","userId":"08076594044575291200"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender   age  hypertension  heart_disease  ever_married  \\\n","0         0  61.0             0              0             1   \n","1         0  59.0             0              0             1   \n","2         1  78.0             0              1             1   \n","3         1  57.0             0              1             0   \n","4         1  58.0             0              0             1   \n","..      ...   ...           ...            ...           ...   \n","196       1  41.0             0              0             0   \n","197       1  40.0             0              0             1   \n","198       0  45.0             1              0             1   \n","199       1  40.0             0              0             1   \n","200       0  80.0             1              0             1   \n","\n","     avg_glucose_level        bmi  stroke  work_type_Private  \\\n","0               202.21  31.555602       1              False   \n","1                76.15  30.242937       1               True   \n","2               219.84  30.698951       1               True   \n","3               217.08  33.808410       1              False   \n","4               189.84  31.378534       1               True   \n","..                 ...        ...     ...                ...   \n","196              70.15  29.756631       0               True   \n","197             191.15  31.124172       0               True   \n","198              95.02  31.798304       0              False   \n","199              83.94  29.951301       0               True   \n","200              83.75  29.097421       0               True   \n","\n","     work_type_Self-employed  work_type_children  Residence_type_Urban  \\\n","0                       True               False                 False   \n","1                      False               False                 False   \n","2                      False               False                  True   \n","3                      False               False                  True   \n","4                      False               False                 False   \n","..                       ...                 ...                   ...   \n","196                    False               False                 False   \n","197                    False               False                  True   \n","198                    False               False                 False   \n","199                    False               False                 False   \n","200                    False               False                  True   \n","\n","     smoking_status_formerly smoked  smoking_status_never smoked  \\\n","0                             False                         True   \n","1                             False                        False   \n","2                             False                        False   \n","3                             False                        False   \n","4                             False                        False   \n","..                              ...                          ...   \n","196                            True                        False   \n","197                           False                        False   \n","198                           False                        False   \n","199                           False                        False   \n","200                           False                         True   \n","\n","     smoking_status_smokes  pred  \n","0                    False     0  \n","1                    False     1  \n","2                    False     1  \n","3                    False     0  \n","4                    False     1  \n","..                     ...   ...  \n","196                  False     0  \n","197                   True     0  \n","198                   True     0  \n","199                   True     0  \n","200                  False     0  \n","\n","[201 rows x 16 columns]"],"text/html":["\n","  <div id=\"df-28994281-d72c-4101-8dc7-4f44f6c9bcdf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>stroke</th>\n","      <th>work_type_Private</th>\n","      <th>work_type_Self-employed</th>\n","      <th>work_type_children</th>\n","      <th>Residence_type_Urban</th>\n","      <th>smoking_status_formerly smoked</th>\n","      <th>smoking_status_never smoked</th>\n","      <th>smoking_status_smokes</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>202.21</td>\n","      <td>31.555602</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>59.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>76.15</td>\n","      <td>30.242937</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>78.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>219.84</td>\n","      <td>30.698951</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>57.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>217.08</td>\n","      <td>33.808410</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>58.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>189.84</td>\n","      <td>31.378534</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>1</td>\n","      <td>41.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>70.15</td>\n","      <td>29.756631</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>1</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>191.15</td>\n","      <td>31.124172</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>0</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>95.02</td>\n","      <td>31.798304</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>1</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>83.94</td>\n","      <td>29.951301</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>0</td>\n","      <td>80.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>83.75</td>\n","      <td>29.097421</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>201 rows × 16 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28994281-d72c-4101-8dc7-4f44f6c9bcdf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-28994281-d72c-4101-8dc7-4f44f6c9bcdf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-28994281-d72c-4101-8dc7-4f44f6c9bcdf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-15851b89-b3ab-4a70-b2be-32e954005b21\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15851b89-b3ab-4a70-b2be-32e954005b21')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-15851b89-b3ab-4a70-b2be-32e954005b21 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_4dbcdc30-c4ac-49c8-8d22-f8b837c0e998\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df5')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4dbcdc30-c4ac-49c8-8d22-f8b837c0e998 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df5');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df5","summary":"{\n  \"name\": \"df5\",\n  \"rows\": 201,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.27618126567241,\n        \"min\": 0.48,\n        \"max\": 82.0,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          58.0,\n          53.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.24032210399497,\n        \"min\": 57.52,\n        \"max\": 260.85,\n        \"num_unique_values\": 199,\n        \"samples\": [\n          81.43,\n          101.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3630978358910584,\n        \"min\": 17.89929451491795,\n        \"max\": 35.18860462517498,\n        \"num_unique_values\": 179,\n        \"samples\": [\n          32.05850252051601,\n          30.19957056534973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Private\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Self-employed\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_children\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type_Urban\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_formerly smoked\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_never smoked\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_smokes\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# 테스트 데이터셋 모델 성능 확인 - 안해도 되는 작업이지만 라벨이 있어서 한번 더 확인해봤습니다.\n","correct_count = sum(df5['stroke']==df5['pred'])\n","total_count = len(df5)\n","model_accuracy = correct_count/total_count\n","print(f'model_accuracy : {model_accuracy:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VIaU2xonOJDq","outputId":"951d55c7-c52c-493c-f6b6-2a5b777b1411"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["model_accuracy : 0.97\n"]}]},{"cell_type":"code","source":["# Tabular 머신러닝 모델 저장을 위한 joblib 라이브러리 임포트\n","import joblib\n","joblib.dump(rfc, '01012345678_1.joblib') # Tabular 데이터는 '연락처_1.joblib' 으로 저장"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iHpgsiPqN1VD","outputId":"5658c996-5b37-439f-ad86-fb4aaacb3961"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['01012345678_1.joblib']"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["import joblib\n","joblib.dump(rfc, '01088139716.joblib')"],"metadata":{"id":"f_126EtJAlWh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular 모델 저장 확인\n","tab_load_model = joblib.load('01012345678_1.joblib')"],"metadata":{"id":"usCRx24IOjQt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tabular 모델 불러와서 모델 성능 확인 / 시험에서는 불필요\n","tab_load_y_pred = tab_load_model.predict(x_test)\n","cm = confusion_matrix(y_test, tab_load_y_pred)\n","sns.heatmap(data=cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"bBNw63ktOxSB","outputId":"fb51791c-d15e-44e2-8b18-8340234ae260"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Tabular 모델 테스트 데이터셋.csv 저장\n","df5.to_csv('01012345678_1.csv', index=False, encoding='utf-8') # Tabular 데이터는 '연락처_1.csv' 으로 저장\n","df6 = pd.read_csv('01012345678_1.csv') # 데이터 저장 확인\n","df6"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"NLlNIes0N1SO","outputId":"0fe6dcba-fb5f-47a6-9b40-27b376e97de1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender   age  hypertension  heart_disease  ever_married  \\\n","0         0  61.0             0              0             1   \n","1         0  59.0             0              0             1   \n","2         1  78.0             0              1             1   \n","3         1  57.0             0              1             0   \n","4         1  58.0             0              0             1   \n","..      ...   ...           ...            ...           ...   \n","196       1  41.0             0              0             0   \n","197       1  40.0             0              0             1   \n","198       0  45.0             1              0             1   \n","199       1  40.0             0              0             1   \n","200       0  80.0             1              0             1   \n","\n","     avg_glucose_level        bmi  stroke  work_type_Private  \\\n","0               202.21  31.555602       1              False   \n","1                76.15  30.242937       1               True   \n","2               219.84  30.698951       1               True   \n","3               217.08  33.808410       1              False   \n","4               189.84  31.378534       1               True   \n","..                 ...        ...     ...                ...   \n","196              70.15  29.756631       0               True   \n","197             191.15  31.124172       0               True   \n","198              95.02  31.798304       0              False   \n","199              83.94  29.951301       0               True   \n","200              83.75  29.097421       0               True   \n","\n","     work_type_Self-employed  work_type_children  Residence_type_Urban  \\\n","0                       True               False                 False   \n","1                      False               False                 False   \n","2                      False               False                  True   \n","3                      False               False                  True   \n","4                      False               False                 False   \n","..                       ...                 ...                   ...   \n","196                    False               False                 False   \n","197                    False               False                  True   \n","198                    False               False                 False   \n","199                    False               False                 False   \n","200                    False               False                  True   \n","\n","     smoking_status_formerly smoked  smoking_status_never smoked  \\\n","0                             False                         True   \n","1                             False                        False   \n","2                             False                        False   \n","3                             False                        False   \n","4                             False                        False   \n","..                              ...                          ...   \n","196                            True                        False   \n","197                           False                        False   \n","198                           False                        False   \n","199                           False                        False   \n","200                           False                         True   \n","\n","     smoking_status_smokes  pred  \n","0                    False     0  \n","1                    False     1  \n","2                    False     1  \n","3                    False     0  \n","4                    False     1  \n","..                     ...   ...  \n","196                  False     0  \n","197                   True     0  \n","198                   True     0  \n","199                   True     0  \n","200                  False     0  \n","\n","[201 rows x 16 columns]"],"text/html":["\n","  <div id=\"df-5b12a51a-ea94-498a-9172-023ef14f96f4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>stroke</th>\n","      <th>work_type_Private</th>\n","      <th>work_type_Self-employed</th>\n","      <th>work_type_children</th>\n","      <th>Residence_type_Urban</th>\n","      <th>smoking_status_formerly smoked</th>\n","      <th>smoking_status_never smoked</th>\n","      <th>smoking_status_smokes</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>202.21</td>\n","      <td>31.555602</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>59.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>76.15</td>\n","      <td>30.242937</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>78.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>219.84</td>\n","      <td>30.698951</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>57.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>217.08</td>\n","      <td>33.808410</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>58.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>189.84</td>\n","      <td>31.378534</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>1</td>\n","      <td>41.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>70.15</td>\n","      <td>29.756631</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>1</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>191.15</td>\n","      <td>31.124172</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>0</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>95.02</td>\n","      <td>31.798304</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>1</td>\n","      <td>40.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>83.94</td>\n","      <td>29.951301</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>0</td>\n","      <td>80.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>83.75</td>\n","      <td>29.097421</td>\n","      <td>0</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>201 rows × 16 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b12a51a-ea94-498a-9172-023ef14f96f4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5b12a51a-ea94-498a-9172-023ef14f96f4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5b12a51a-ea94-498a-9172-023ef14f96f4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a8c0a805-4ee9-44a1-97ed-461d9927fc0a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8c0a805-4ee9-44a1-97ed-461d9927fc0a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a8c0a805-4ee9-44a1-97ed-461d9927fc0a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_67ad2346-99d6-4a1c-89f2-f1ced4dff641\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df6')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_67ad2346-99d6-4a1c-89f2-f1ced4dff641 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df6');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df6","summary":"{\n  \"name\": \"df6\",\n  \"rows\": 201,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.27618126567241,\n        \"min\": 0.48,\n        \"max\": 82.0,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          58.0,\n          53.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.24032210399497,\n        \"min\": 57.52,\n        \"max\": 260.85,\n        \"num_unique_values\": 199,\n        \"samples\": [\n          81.43,\n          101.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3630978358910584,\n        \"min\": 17.89929451491795,\n        \"max\": 35.18860462517498,\n        \"num_unique_values\": 179,\n        \"samples\": [\n          32.05850252051601,\n          30.19957056534973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Private\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Self-employed\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_children\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type_Urban\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_formerly smoked\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_never smoked\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_smokes\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["# AICE Professional-2 Text 분류 모델 만들기"],"metadata":{"id":"dXZa2JjPvjUY"}},{"cell_type":"code","source":["# Text train 데이터.csv 읽기\n","# column이 없는 데이터셋이라 header를 None으로 하고 임의로 라벨을 지정해서 사용할 예정입니다.\n","#text_df = pd.read_csv('twitter_training.csv', header=None)\n","# 시험에서는 위와 비슷한 명칭으로 데이터를 불러서 사용합니다.\n","\n","text_df = pd.read_csv('https://raw.githubusercontent.com/suku-7/AICE-Pro-share/refs/heads/main/twitter_training.csv', header=None)\n","text_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"9ViRdiyqK_dN","outputId":"1caed9dd-c358-4cb1-d4f5-7c6ca88ad07f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          0            1         2  \\\n","0      2401  Borderlands  Positive   \n","1      2401  Borderlands  Positive   \n","2      2401  Borderlands  Positive   \n","3      2401  Borderlands  Positive   \n","4      2401  Borderlands  Positive   \n","...     ...          ...       ...   \n","74677  9200       Nvidia  Positive   \n","74678  9200       Nvidia  Positive   \n","74679  9200       Nvidia  Positive   \n","74680  9200       Nvidia  Positive   \n","74681  9200       Nvidia  Positive   \n","\n","                                                       3  \n","0      im getting on borderlands and i will murder yo...  \n","1      I am coming to the borders and I will kill you...  \n","2      im getting on borderlands and i will kill you ...  \n","3      im coming on borderlands and i will murder you...  \n","4      im getting on borderlands 2 and i will murder ...  \n","...                                                  ...  \n","74677  Just realized that the Windows partition of my...  \n","74678  Just realized that my Mac window partition is ...  \n","74679  Just realized the windows partition of my Mac ...  \n","74680  Just realized between the windows partition of...  \n","74681  Just like the windows partition of my Mac is l...  \n","\n","[74682 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-c3cdbfb9-b36a-41f2-bbbe-e0eebd9934fa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will murder yo...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>I am coming to the borders and I will kill you...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will kill you ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im coming on borderlands and i will murder you...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2401</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>im getting on borderlands 2 and i will murder ...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74677</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized that the Windows partition of my...</td>\n","    </tr>\n","    <tr>\n","      <th>74678</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized that my Mac window partition is ...</td>\n","    </tr>\n","    <tr>\n","      <th>74679</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized the windows partition of my Mac ...</td>\n","    </tr>\n","    <tr>\n","      <th>74680</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just realized between the windows partition of...</td>\n","    </tr>\n","    <tr>\n","      <th>74681</th>\n","      <td>9200</td>\n","      <td>Nvidia</td>\n","      <td>Positive</td>\n","      <td>Just like the windows partition of my Mac is l...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74682 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3cdbfb9-b36a-41f2-bbbe-e0eebd9934fa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c3cdbfb9-b36a-41f2-bbbe-e0eebd9934fa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c3cdbfb9-b36a-41f2-bbbe-e0eebd9934fa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a77fd576-ef90-45e8-99bd-420a3a910604\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a77fd576-ef90-45e8-99bd-420a3a910604')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a77fd576-ef90-45e8-99bd-420a3a910604 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7b8bd7a1-f683-4b23-aca8-11da0b02626c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7b8bd7a1-f683-4b23-aca8-11da0b02626c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('text_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"text_df","summary":"{\n  \"name\": \"text_df\",\n  \"rows\": 74682,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3740,\n        \"min\": 1,\n        \"max\": 13200,\n        \"num_unique_values\": 12447,\n        \"samples\": [\n          1616,\n          2660,\n          2335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"Cyberpunk2077\",\n          \"Microsoft\",\n          \"TomClancysRainbowSix\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Irrelevant\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69491,\n        \"samples\": [\n          \"Thanks to @ Kain0025 for the raid. Thanks to @ gamingstreams and @ velonese002 for the bitts! And thanks to @ ColTrysTohete for hanging out and hanging out!. I hope to continue streaming regularly.. watch the w / @ Cohtstreams _ coming live!\",\n          \"How not to get bored about every damn thing in life.\",\n          \"The Best Way to Protect the Samsung Galaxy Note10+ buff.ly/2zkjIhU <unk> ^\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["\n","# Text 데이터 전처리 - 감정 분류에 불필요한 데이터셋 제거\n","text_df = text_df.drop([0, 1], axis=1)"],"metadata":{"id":"_vfcjN96O-Yj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text 데이터 전처리 - column 임의로 지정 label, text\n","text_df = text_df.rename(columns={2:'label', 3:'text'})\n","text_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"AzyO8jVpO-Vl","outputId":"c92813ef-322b-4cf8-919b-3b47e78fe29c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          label                                               text\n","0      Positive  im getting on borderlands and i will murder yo...\n","1      Positive  I am coming to the borders and I will kill you...\n","2      Positive  im getting on borderlands and i will kill you ...\n","3      Positive  im coming on borderlands and i will murder you...\n","4      Positive  im getting on borderlands 2 and i will murder ...\n","...         ...                                                ...\n","74677  Positive  Just realized that the Windows partition of my...\n","74678  Positive  Just realized that my Mac window partition is ...\n","74679  Positive  Just realized the windows partition of my Mac ...\n","74680  Positive  Just realized between the windows partition of...\n","74681  Positive  Just like the windows partition of my Mac is l...\n","\n","[74682 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-3af41865-1feb-4829-aec7-2182e7e96259\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will murder yo...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Positive</td>\n","      <td>I am coming to the borders and I will kill you...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will kill you ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Positive</td>\n","      <td>im coming on borderlands and i will murder you...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands 2 and i will murder ...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74677</th>\n","      <td>Positive</td>\n","      <td>Just realized that the Windows partition of my...</td>\n","    </tr>\n","    <tr>\n","      <th>74678</th>\n","      <td>Positive</td>\n","      <td>Just realized that my Mac window partition is ...</td>\n","    </tr>\n","    <tr>\n","      <th>74679</th>\n","      <td>Positive</td>\n","      <td>Just realized the windows partition of my Mac ...</td>\n","    </tr>\n","    <tr>\n","      <th>74680</th>\n","      <td>Positive</td>\n","      <td>Just realized between the windows partition of...</td>\n","    </tr>\n","    <tr>\n","      <th>74681</th>\n","      <td>Positive</td>\n","      <td>Just like the windows partition of my Mac is l...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74682 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3af41865-1feb-4829-aec7-2182e7e96259')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3af41865-1feb-4829-aec7-2182e7e96259 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3af41865-1feb-4829-aec7-2182e7e96259');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-250abd9a-b208-463f-b89b-3eacffe73d5d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-250abd9a-b208-463f-b89b-3eacffe73d5d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-250abd9a-b208-463f-b89b-3eacffe73d5d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a6b971ce-bd10-4a59-a1f4-c29fbe2833b6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a6b971ce-bd10-4a59-a1f4-c29fbe2833b6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('text_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"text_df","summary":"{\n  \"name\": \"text_df\",\n  \"rows\": 74682,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Irrelevant\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69491,\n        \"samples\": [\n          \"Thanks to @ Kain0025 for the raid. Thanks to @ gamingstreams and @ velonese002 for the bitts! And thanks to @ ColTrysTohete for hanging out and hanging out!. I hope to continue streaming regularly.. watch the w / @ Cohtstreams _ coming live!\",\n          \"How not to get bored about every damn thing in life.\",\n          \"The Best Way to Protect the Samsung Galaxy Note10+ buff.ly/2zkjIhU <unk> ^\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["# Text 데이터 전처리 - 결측치 확인\n","text_df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"JYy1KOxEPPuo","outputId":"5efd614c-2bb9-49db-d201-4226e60cbdc9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label      0\n","text     686\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>label</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>text</th>\n","      <td>686</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Text 데이터 전처리 - 결측치 확인\n","text_df = text_df.dropna()"],"metadata":{"id":"o4mQn9XtPSFH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text 데이터 전처리 - 불용어 여부 확인\n","# '[^a-zA-Z ]' 으로 적으면 소문자, 대문자, 공백 제외 다른 문자나 숫자가 있는지 확인\n","# '[^가-힣 ]' 으로 적으면 한글, 공백 제외 다른 문자나 숫자가 있는지 확인\n","# '[^a-zA-Z가-힣 ]' 으로 적으면 영문, 한글, 공백 제외\n","# [^a-zA-Z가-힣] <- 공백이 없이 만들면 이후 작업에서 띄어쓰기에 필요한 공백을 모두 제거해버려서 문제가 됩니다.\n","\n","text_df[text_df['text'].str.contains('[^a-zA-Z ]')].head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"CtCXLdUwO-S5","outputId":"990e5d6e-4d0b-4063-99db-c7bf8389ff5b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label                                               text\n","0  Positive  im getting on borderlands and i will murder yo...\n","1  Positive  I am coming to the borders and I will kill you...\n","2  Positive  im getting on borderlands and i will kill you ..."],"text/html":["\n","  <div id=\"df-bd4c5156-1ce3-4774-ab1d-7fa1625523a0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will murder yo...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Positive</td>\n","      <td>I am coming to the borders and I will kill you...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Positive</td>\n","      <td>im getting on borderlands and i will kill you ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd4c5156-1ce3-4774-ab1d-7fa1625523a0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bd4c5156-1ce3-4774-ab1d-7fa1625523a0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bd4c5156-1ce3-4774-ab1d-7fa1625523a0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-312d62d8-a382-4de7-be57-86fec3a54e72\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-312d62d8-a382-4de7-be57-86fec3a54e72')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-312d62d8-a382-4de7-be57-86fec3a54e72 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"text_df[text_df['text']\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"im getting on borderlands and i will murder you all ,\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# Text 영문자 제외 모두 ''으로 변경\n","text_df['text'] = text_df['text'].str.replace('[^a-zA-Z ]', '', regex=True)\n","# Text 문자열의 앞뒤 공백을 제거\n","text_df['text'] = text_df['text'].str.strip()\n","# Text 소문자로 변경\n","text_df['text'] = text_df['text'].str.lower()\n","# Text 중복 여부 확인 / 6997개 인 것 확인\n","text_df['text'].duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EJ065PsLO-P9","outputId":"8558a4ec-0f37-4e63-99c3-416e8b179632"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-46-4ef7be13015a>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  text_df['text'] = text_df['text'].str.replace('[^a-zA-Z ]', '', regex=True)\n","<ipython-input-46-4ef7be13015a>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  text_df['text'] = text_df['text'].str.strip()\n","<ipython-input-46-4ef7be13015a>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  text_df['text'] = text_df['text'].str.lower()\n"]},{"output_type":"execute_result","data":{"text/plain":["np.int64(6997)"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["# Text 중복 제거\n","text_df.drop_duplicates(subset='text', inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IeGX9jsnO-M-","outputId":"b0448965-908b-4b72-b5f4-66cfb6d0f78c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-47-8fbce50339b7>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  text_df.drop_duplicates(subset='text', inplace=True)\n"]}]},{"cell_type":"code","source":["# Text 중복 제거 확인\n","text_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s59VZN-5O-KI","outputId":"e6b23feb-2ce3-4c4a-e0f0-f9ba7c4544a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 66999 entries, 0 to 74681\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   label   66999 non-null  object\n"," 1   text    66999 non-null  object\n","dtypes: object(2)\n","memory usage: 1.5+ MB\n"]}]},{"cell_type":"code","source":["# Text 라벨이 어떤 종류가 있는지 확인\n","text_df['label'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"NdUIRVmvO-HT","outputId":"b22ffc8f-54f9-47f5-bfec-8a49df92182d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","Negative      20455\n","Positive      18215\n","Neutral       16519\n","Irrelevant    11810\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Negative</th>\n","      <td>20455</td>\n","    </tr>\n","    <tr>\n","      <th>Positive</th>\n","      <td>18215</td>\n","    </tr>\n","    <tr>\n","      <th>Neutral</th>\n","      <td>16519</td>\n","    </tr>\n","    <tr>\n","      <th>Irrelevant</th>\n","      <td>11810</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["# Text 라벨 인코딩\n","text_class_to_label = {'Negative':0, 'Positive':1, 'Neutral':2, 'Irrelevant':3}\n","text_df['label'] = text_df['label'].map(text_class_to_label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8oBKmlkgPnHN","outputId":"bad8e301-4210-41e0-8806-d739eb8bd842"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-50-6d2bea400fac>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  text_df['label'] = text_df['label'].map(text_class_to_label)\n"]}]},{"cell_type":"code","source":["# Text 라벨 인코딩 제대로 되었는지 확인\n","text_df['label'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"t1XNzSU-PnEe","outputId":"f6437d23-d4fd-46a2-ac83-7b4df2b1623e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    20455\n","1    18215\n","2    16519\n","3    11810\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>20455</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18215</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>16519</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11810</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["# Text feature, label 분류\n","text_features = text_df['text']\n","text_labels = text_df['label']"],"metadata":{"id":"AO-3fyL1Pm_X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text train, valid 데이터셋 나누기\n","text_x_train, text_x_valid, text_y_train, text_y_valid = train_test_split(text_features, text_labels, test_size=0.2, random_state=42, stratify=text_labels)\n","text_x_train.shape, text_x_valid.shape, text_y_train.shape, text_y_valid.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V1yW5i7-Pm8n","outputId":"80b4607e-73fd-4b70-b9b8-6331c0c38a52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((53599,), (13400,), (53599,), (13400,))"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["# Text 분류, TFIDF-머신러닝 모델로 분류하기\n","# 사용방법이 비교적 단순하고 전처리도 거의 없어서 먼저 해봅니다.\n","# TF-IDF는 텍스트가 포함된 벡터의 특성에 따라 각 단어의 가중치를 계산하고,\n","# 그 가중치를 이용해 문서나 텍스트를 분류하거나 회귀 모델에 입력으로 사용합니다.\n","\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","tfidf = TfidfVectorizer()\n","text_x_train_v = tfidf.fit_transform(text_x_train)\n","text_x_valid_v = tfidf.transform(text_x_valid)"],"metadata":{"id":"1DAt2QsKPm6F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text LogisticRegression 모델 성능 확인\n","text_lgr = LogisticRegression()\n","text_lgr.fit(text_x_train_v, text_y_train)\n","text_lgr.score(text_x_valid_v, text_y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bDrzrOTOPm3E","outputId":"0463c623-a629-4c47-c639-1a5dfafc6e5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.7642537313432836"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["# Text SGDClassifer 모델 성능 확인\n","text_sgdc = SGDClassifier()\n","text_sgdc.fit(text_x_train_v, text_y_train)\n","text_sgdc.score(text_x_valid_v, text_y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zIWFgTC4Pm0V","outputId":"955c5960-1fe0-4dc3-f975-49d37ef30993"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7161940298507463"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["# Text DecisionTreeClassifier 모델 성능 확인\n","text_dtc = DecisionTreeClassifier()\n","text_dtc.fit(text_x_train_v, text_y_train)\n","text_dtc.score(text_x_valid_v, text_y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J07MFZkaO-Eg","outputId":"a6a6bb0b-7599-46d6-f6d0-3b9641d9b0b6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7198507462686567"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["# Text RandomForestClassifier 모델 성능 확인\n","text_rfc = RandomForestClassifier()\n","text_rfc.fit(text_x_train_v, text_y_train)\n","text_rfc.score(text_x_valid_v, text_y_valid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cnzuS8kfQwN1","outputId":"03057ddd-10b7-4458-af6f-7f1e72ddaf71"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9085820895522388"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["# Text Tokenizer - 딥러닝 분석을 위한 라이브러리 임포트\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"metadata":{"id":"KMtW1q6EQnZN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text Tokenizer 작업\n","tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(text_x_train)"],"metadata":{"id":"PmYMjWelQnWF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tokenizer에 학습한 단어가 어떤게 있는지 확인용입니다. 작성하지 않아도 괜찮아요.\n","print(tokenizer.word_index)"],"metadata":{"id":"t8jmZ0N5QnTe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tokenizer에 학습한 단어별 빈도 수 확인용입니다. 작성하지 않아도 괜찮아요.\n","print(tokenizer.word_counts)"],"metadata":{"id":"jkrbYx-eQnQ4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tokenizer가 학습한 단어의 개수를 확인합니다.\n","max_words = len(tokenizer.word_index)\n","max_words"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zj3YBNaIQnN8","outputId":"239d5126-3292-474f-b553-44faab9d8684"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["35958"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["# Tokenizer 시퀀스 작업\n","text_x_train_seq = tokenizer.texts_to_sequences(text_x_train)\n","text_x_valid_seq = tokenizer.texts_to_sequences(text_x_valid)"],"metadata":{"id":"2MyxBVkDQnK9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tokenizer 시퀀스 작업 후 가장 긴 문장의 단어 개수를 찾습니다.\n","max(len(i) for i in text_x_train_seq)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E8u8B6AWQnIE","outputId":"c07f10cb-7338-4137-ab30-40f5dc6f768e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["166"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["# Tokenizer 시퀀스 이후 pad 작업을 하여 가장 긴 문장의 단어수에 맞춰서 공백을 0으로 채워줍니다.\n","text_x_train_pad = pad_sequences(text_x_train_seq, maxlen=166)\n","text_x_valid_pad = pad_sequences(text_x_valid_seq, maxlen=166)"],"metadata":{"id":"wIXc5xaYQnFS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text label 갯수 확인용 (4개)\n","text_labels.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"HVYTnxjqRkd3","outputId":"110d95cc-611a-4684-e038-43d358091cd4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    20455\n","1    18215\n","2    16519\n","3    11810\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>20455</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18215</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>16519</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11810</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["# Text 딥러닝 모델\n","text_model = Sequential()\n","text_model.add(Embedding(input_dim=max_words+1, output_dim=100, input_length=166))\n","text_model.add(Bidirectional(LSTM(16, return_sequences=True)))\n","text_model.add(Dropout(0.3))\n","text_model.add(Bidirectional(LSTM(16, return_sequences=False)))\n","text_model.add(Dropout(0.3))\n","text_model.add(Dense(64, activation='swish'))\n","text_model.add(BatchNormalization())\n","text_model.add(Dropout(0.3))\n","text_model.add(Dense(4, activation='softmax'))"],"metadata":{"id":"rqY5DYzzQnCU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cd3815a8-b44b-45db-fba5-a361e32fc856"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Text 딥러닝 모델 compile\n","text_model.compile(\n","    optimizer=tf.keras.optimizers.Adam(0.001),\n","    loss='sparse_categorical_crossentropy',\n","    metrics=['accuracy']\n",")"],"metadata":{"id":"qVIR81ilRnz4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text는 es2, mc2, history2 처럼 변수에 2를 붙여서 사용했습니다.\n","# 같은 코드 안에서 3개의 모델을 만들어서 비슷한 변수명에 숫자나, text, img를 붙였습니다.\n","\n","es2 = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True, verbose=1)\n","mc2 = ModelCheckpoint('best_text_model.keras', monitor='val_loss', save_best_only=True, verbose=1)\n","\n","history2 = text_model.fit(\n","    text_x_train_pad, text_y_train,\n","    epochs=5,\n","    batch_size=512,\n","    validation_data=(text_x_valid_pad, text_y_valid),\n","    callbacks=[es2, mc2],\n","    verbose=1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MEaxYLtKRntf","outputId":"2d76a37c-33fb-4fae-a991-940cdce5984c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step - accuracy: 0.4364 - loss: 1.2234\n","Epoch 1: val_loss improved from inf to 1.25177, saving model to best_text_model.keras\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 58ms/step - accuracy: 0.4376 - loss: 1.2216 - val_accuracy: 0.5882 - val_loss: 1.2518\n","Epoch 2/5\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.8288 - loss: 0.4851\n","Epoch 2: val_loss improved from 1.25177 to 0.96368, saving model to best_text_model.keras\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 48ms/step - accuracy: 0.8290 - loss: 0.4846 - val_accuracy: 0.7831 - val_loss: 0.9637\n","Epoch 3/5\n","\u001b[1m104/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 45ms/step - accuracy: 0.9267 - loss: 0.2259\n","Epoch 3: val_loss improved from 0.96368 to 0.57318, saving model to best_text_model.keras\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 52ms/step - accuracy: 0.9267 - loss: 0.2259 - val_accuracy: 0.8449 - val_loss: 0.5732\n","Epoch 4/5\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.9445 - loss: 0.1625\n","Epoch 4: val_loss improved from 0.57318 to 0.39921, saving model to best_text_model.keras\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - accuracy: 0.9445 - loss: 0.1626 - val_accuracy: 0.8657 - val_loss: 0.3992\n","Epoch 5/5\n","\u001b[1m104/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 45ms/step - accuracy: 0.9575 - loss: 0.1294\n","Epoch 5: val_loss improved from 0.39921 to 0.39639, saving model to best_text_model.keras\n","\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 53ms/step - accuracy: 0.9574 - loss: 0.1295 - val_accuracy: 0.8725 - val_loss: 0.3964\n","Restoring model weights from the end of the best epoch: 5.\n"]}]},{"cell_type":"code","source":["# 위의 Text 모델 성능은 0.873이 나왔네요.\n","# Text Test 데이터셋.csv 불러오기\n","# 시험에서는 위와 비슷한 명칭으로 데이터를 불러서 사용합니다.\n","\n","text_df5 = pd.read_csv('https://raw.githubusercontent.com/suku-7/AICE-Pro-share/refs/heads/main/twitter_validation.csv', header=None)\n","text_df5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"HEmZmYHgRnqh","outputId":"275fb2aa-659e-4f91-d284-9be6533a33b9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        0                    1           2  \\\n","0    3364             Facebook  Irrelevant   \n","1     352               Amazon     Neutral   \n","2    8312            Microsoft    Negative   \n","3    4371                CS-GO    Negative   \n","4    4433               Google     Neutral   \n","..    ...                  ...         ...   \n","995  4891  GrandTheftAuto(GTA)  Irrelevant   \n","996  4359                CS-GO  Irrelevant   \n","997  2652          Borderlands    Positive   \n","998  8069            Microsoft    Positive   \n","999  6960      johnson&johnson     Neutral   \n","\n","                                                     3  \n","0    I mentioned on Facebook that I was struggling ...  \n","1    BBC News - Amazon boss Jeff Bezos rejects clai...  \n","2    @Microsoft Why do I pay for WORD when it funct...  \n","3    CSGO matchmaking is so full of closet hacking,...  \n","4    Now the President is slapping Americans in the...  \n","..                                                 ...  \n","995  ⭐️ Toronto is the arts and culture capital of ...  \n","996  tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...  \n","997  Today sucked so it’s time to drink wine n play...  \n","998  Bought a fraction of Microsoft today. Small wins.  \n","999  Johnson & Johnson to stop selling talc baby po...  \n","\n","[1000 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-9bebbf3d-9de8-4062-8cef-5e4abbdf2348\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3364</td>\n","      <td>Facebook</td>\n","      <td>Irrelevant</td>\n","      <td>I mentioned on Facebook that I was struggling ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>352</td>\n","      <td>Amazon</td>\n","      <td>Neutral</td>\n","      <td>BBC News - Amazon boss Jeff Bezos rejects clai...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8312</td>\n","      <td>Microsoft</td>\n","      <td>Negative</td>\n","      <td>@Microsoft Why do I pay for WORD when it funct...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4371</td>\n","      <td>CS-GO</td>\n","      <td>Negative</td>\n","      <td>CSGO matchmaking is so full of closet hacking,...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4433</td>\n","      <td>Google</td>\n","      <td>Neutral</td>\n","      <td>Now the President is slapping Americans in the...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>4891</td>\n","      <td>GrandTheftAuto(GTA)</td>\n","      <td>Irrelevant</td>\n","      <td>⭐️ Toronto is the arts and culture capital of ...</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>4359</td>\n","      <td>CS-GO</td>\n","      <td>Irrelevant</td>\n","      <td>tHIS IS ACTUALLY A GOOD MOVE TOT BRING MORE VI...</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>2652</td>\n","      <td>Borderlands</td>\n","      <td>Positive</td>\n","      <td>Today sucked so it’s time to drink wine n play...</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>8069</td>\n","      <td>Microsoft</td>\n","      <td>Positive</td>\n","      <td>Bought a fraction of Microsoft today. Small wins.</td>\n","    </tr>\n","    <tr>\n","      <th>999</th>\n","      <td>6960</td>\n","      <td>johnson&amp;johnson</td>\n","      <td>Neutral</td>\n","      <td>Johnson &amp; Johnson to stop selling talc baby po...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bebbf3d-9de8-4062-8cef-5e4abbdf2348')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9bebbf3d-9de8-4062-8cef-5e4abbdf2348 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9bebbf3d-9de8-4062-8cef-5e4abbdf2348');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b10b1b10-58cd-4b06-a054-f677d7fbbd3b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b10b1b10-58cd-4b06-a054-f677d7fbbd3b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b10b1b10-58cd-4b06-a054-f677d7fbbd3b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3edad172-b1aa-4151-b091-e6e98137d769\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_df5')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3edad172-b1aa-4151-b091-e6e98137d769 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('text_df5');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"text_df5","summary":"{\n  \"name\": \"text_df5\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3728,\n        \"min\": 6,\n        \"max\": 13197,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          11656,\n          9769,\n          7021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"WorldOfCraft\",\n          \"RedDeadRedemption(RDR)\",\n          \"Xbox(Xseries)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Positive\",\n          \"Irrelevant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 999,\n        \"samples\": [\n          \"Man this some GTA shit lol.\",\n          \"@Xbox @majornelson I\\u2019d love to bring home a new Xbox Series X, but they are all sold out. So the emails are VERY misleading. Just sayin.\",\n          \"This is dope! Puff is such a great kid.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["# Text Test 데이터셋 전처리 - 불필요한 column 삭제, 결측치 확인\n","text_df5 = text_df5.drop([0, 1], axis=1)\n","text_df5 = text_df5.rename(columns={2:'label', 3:'text'})\n","text_df5.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"tE3RijUjSzr8","outputId":"5d0c3bb9-4e2f-4288-fed7-b05ab417d2fb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label    0\n","text     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>label</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>text</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["# Text Test 데이터셋 전처리 - 불용어 여부 확인\n","text_df5[text_df5['text'].str.contains('[^a-zA-Z ]')].head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"zcgSnacOS2qW","outputId":"d4c28b0a-95bb-420c-ea55-54d1589c7a0a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        label                                               text\n","0  Irrelevant  I mentioned on Facebook that I was struggling ...\n","1     Neutral  BBC News - Amazon boss Jeff Bezos rejects clai...\n","2    Negative  @Microsoft Why do I pay for WORD when it funct..."],"text/html":["\n","  <div id=\"df-7fd0c48e-4c9a-4585-b2c0-76953be256d9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Irrelevant</td>\n","      <td>I mentioned on Facebook that I was struggling ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Neutral</td>\n","      <td>BBC News - Amazon boss Jeff Bezos rejects clai...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Negative</td>\n","      <td>@Microsoft Why do I pay for WORD when it funct...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fd0c48e-4c9a-4585-b2c0-76953be256d9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7fd0c48e-4c9a-4585-b2c0-76953be256d9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7fd0c48e-4c9a-4585-b2c0-76953be256d9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-698cb92b-7c52-4b4c-b44d-7614310c0f33\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-698cb92b-7c52-4b4c-b44d-7614310c0f33')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-698cb92b-7c52-4b4c-b44d-7614310c0f33 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"text_df5[text_df5['text']\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Irrelevant\",\n          \"Neutral\",\n          \"Negative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"I mentioned on Facebook that I was struggling for motivation to go for a run the other day, which has been translated by Tom\\u2019s great auntie as \\u2018Hayley can\\u2019t get out of bed\\u2019 and told to his grandma, who now thinks I\\u2019m a lazy, terrible person \\ud83e\\udd23\",\n          \"BBC News - Amazon boss Jeff Bezos rejects claims company acted like a 'drug dealer' bbc.co.uk/news/av/busine\\u2026\",\n          \"@Microsoft Why do I pay for WORD when it functions so poorly on my @SamsungUS Chromebook? \\ud83d\\ude44\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["# Text Test 데이터셋 불용어 제거\n","text_df5['text'] = text_df5['text'].str.replace('[^a-zA-Z ]', '', regex=True)\n","# Text Test 데이터셋 앞뒤에 공백 제거\n","text_df5['text'] = text_df5['text'].str.strip()\n","# Text Test 데이터셋 소문자로 변경\n","text_df5['text'] = text_df5['text'].str.lower()\n","# Text Test 데이터셋 중복 여부, 갯수 확인\n","text_df5['text'].duplicated().sum()\n","\n","# Train Data와 다르게 Test 데이터셋은 중복이 있어도 지우지 않았습니다."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_zoUKas0S4pE","outputId":"ca5eb5d9-4f9a-4b7d-aa00-215c668e92e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.int64(3)"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["# Text Test 데이터셋 라벨 종류, 갯수 확인\n","text_df5['label'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"T7Nk_anvTZJj","outputId":"353dd457-52b8-4600-e891-134b4615f20f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","Neutral       285\n","Positive      277\n","Negative      266\n","Irrelevant    172\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Neutral</th>\n","      <td>285</td>\n","    </tr>\n","    <tr>\n","      <th>Positive</th>\n","      <td>277</td>\n","    </tr>\n","    <tr>\n","      <th>Negative</th>\n","      <td>266</td>\n","    </tr>\n","    <tr>\n","      <th>Irrelevant</th>\n","      <td>172</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["# Text Test 데이터셋 라벨 인코딩, 제대로 되었는지 확인 (Train 데이터셋하고 동일하게)\n","text_class_to_label = {'Negative':0, 'Positive':1, 'Neutral':2, 'Irrelevant':3}\n","text_df5['label'] = text_df5['label'].map(text_class_to_label)\n","text_df5['label'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"KiieDAJKTbEW","outputId":"4ff34655-8f8b-402f-b2d3-48ae20acf0c0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","2    285\n","1    277\n","0    266\n","3    172\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>285</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>277</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>266</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>172</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["# Text Test 데이터셋 feature, label 분류\n","text_x_test = text_df5['text']\n","text_y_test = text_df5['label']\n","# Text Test 데이터 모델 성능 확인을 위해 데이터 전처리, Tfidf, Tokenizer\n","text_x_test_v = tfidf.transform(text_x_test)\n","text_x_test_seq = tokenizer.texts_to_sequences(text_x_test)\n","text_x_test_pad = pad_sequences(text_x_test_seq)"],"metadata":{"id":"IEWfZiNWRnn6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text Test 데이터셋 모델로 예측하기.\n","text_rfc_y_pred = text_rfc.predict(text_x_test_v)\n","text_model_y_pred = text_model.predict(text_x_test_pad)\n","text_model_y_pred = np.argmax(text_model_y_pred, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y5pBeNtfQm_f","outputId":"ec312e23-d798-45d7-83a3-46f189ce39ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step\n"]}]},{"cell_type":"code","source":["# Text Test 데이터셋에 label이 있어서 예측한 것과 비교용으로 시각화 하였습니다.\n","# 시험에서는 label이 없기 때문에 확인할 수 없습니다.\n","# Text RandomForestClassifier 모델\n","text_cm = confusion_matrix(text_y_test, text_rfc_y_pred)\n","sns.heatmap(data=text_cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"MddXCNewQm8z","outputId":"98901912-63c2-438a-9bbc-c27d058799c6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Text 딥러닝 모델\n","text_cm = confusion_matrix(text_y_test, text_model_y_pred)\n","sns.heatmap(data=text_cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"dz6eCDIjQm5u","outputId":"aafc3c8e-67e2-48b8-cecd-346293aab6aa"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Text RandomForestClassifier는 훈련 데이터셋 기준 0.908\n","# Text 딥러닝은 훈련 데이터셋 기준 0.873이 나와서 RandomForest 모델을 선택했습니다.\n","# Text 데이터 라벨이 4개인 분류인데 96% 성능이면 꽤 좋은거 같습니다.\n","# 위에서도 말씀드렸지만, Test Dataset에 라벨이 있기 때문에 예측값과 비교한 부분입니다.\n","# 시험에서는 불필요한 부분입니다.\n","\n","text_df5['pred'] = text_rfc_y_pred\n","text_correct_count = sum(text_df5['label']==text_df5['pred'])\n","text_total_count = len(text_df5)\n","text_model_accuracy = text_correct_count/text_total_count\n","print(f'text_model_accuracy : {text_model_accuracy:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pssDHGrOUkHL","outputId":"58dd272c-0ea9-4c75-d3e7-02947d613a82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["text_model_accuracy : 0.96\n"]}]},{"cell_type":"code","source":["# Text dataset에 예측한 값을 csv에 추가\n","text_df5['pred'] = text_rfc_y_pred\n","text_df5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Id-xiQ0yUkBt","outputId":"b9347e05-4bbf-434e-a124-eb97839741e8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     label                                               text  pred\n","0        3  i mentioned on facebook that i was struggling ...     3\n","1        2  bbc news  amazon boss jeff bezos rejects claim...     2\n","2        0  microsoft why do i pay for word when it functi...     0\n","3        0  csgo matchmaking is so full of closet hacking ...     0\n","4        2  now the president is slapping americans in the...     2\n","..     ...                                                ...   ...\n","995      3  toronto is the arts and culture capital of can...     3\n","996      3  this is actually a good move tot bring more vi...     3\n","997      1  today sucked so its time to drink wine n play ...     1\n","998      1    bought a fraction of microsoft today small wins     1\n","999      2  johnson  johnson to stop selling talc baby pow...     2\n","\n","[1000 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-8d8d2d60-a48c-4765-841d-446d69fbf8fb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>i mentioned on facebook that i was struggling ...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>bbc news  amazon boss jeff bezos rejects claim...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>microsoft why do i pay for word when it functi...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>csgo matchmaking is so full of closet hacking ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>now the president is slapping americans in the...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>3</td>\n","      <td>toronto is the arts and culture capital of can...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>3</td>\n","      <td>this is actually a good move tot bring more vi...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>1</td>\n","      <td>today sucked so its time to drink wine n play ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>1</td>\n","      <td>bought a fraction of microsoft today small wins</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>999</th>\n","      <td>2</td>\n","      <td>johnson  johnson to stop selling talc baby pow...</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d8d2d60-a48c-4765-841d-446d69fbf8fb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d8d2d60-a48c-4765-841d-446d69fbf8fb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d8d2d60-a48c-4765-841d-446d69fbf8fb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7b221664-bc51-41d3-a052-05544af0f8c1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b221664-bc51-41d3-a052-05544af0f8c1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7b221664-bc51-41d3-a052-05544af0f8c1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f8d7cbe0-9da9-44b6-a568-adda00f3e557\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_df5')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f8d7cbe0-9da9-44b6-a568-adda00f3e557 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('text_df5');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"text_df5","summary":"{\n  \"name\": \"text_df5\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 997,\n        \"samples\": [\n          \"man this some gta shit lol\",\n          \"hey verizon is there a known outage in\",\n          \"this is dope puff is such a great kid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["# Text dataset 라벨 인코딩 했던 것 원상태로\n","text_label_to_class = {0:'Negative', 1:'Positive', 2:'Neutral', 3:'Irrelevant'}\n","text_df5['label'] = text_df5['label'].map(text_label_to_class)\n","text_df5['pred'] = text_df5['pred'].map(text_label_to_class)\n","text_df5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"n1p5JFa6Uj-8","outputId":"d5421f66-68b4-46d4-f346-f7d035b596be"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          label                                               text        pred\n","0    Irrelevant  i mentioned on facebook that i was struggling ...  Irrelevant\n","1       Neutral  bbc news  amazon boss jeff bezos rejects claim...     Neutral\n","2      Negative  microsoft why do i pay for word when it functi...    Negative\n","3      Negative  csgo matchmaking is so full of closet hacking ...    Negative\n","4       Neutral  now the president is slapping americans in the...     Neutral\n","..          ...                                                ...         ...\n","995  Irrelevant  toronto is the arts and culture capital of can...  Irrelevant\n","996  Irrelevant  this is actually a good move tot bring more vi...  Irrelevant\n","997    Positive  today sucked so its time to drink wine n play ...    Positive\n","998    Positive    bought a fraction of microsoft today small wins    Positive\n","999     Neutral  johnson  johnson to stop selling talc baby pow...     Neutral\n","\n","[1000 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-dc39eb26-8e34-4511-a703-e03e6b8878c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Irrelevant</td>\n","      <td>i mentioned on facebook that i was struggling ...</td>\n","      <td>Irrelevant</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Neutral</td>\n","      <td>bbc news  amazon boss jeff bezos rejects claim...</td>\n","      <td>Neutral</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Negative</td>\n","      <td>microsoft why do i pay for word when it functi...</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Negative</td>\n","      <td>csgo matchmaking is so full of closet hacking ...</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Neutral</td>\n","      <td>now the president is slapping americans in the...</td>\n","      <td>Neutral</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>Irrelevant</td>\n","      <td>toronto is the arts and culture capital of can...</td>\n","      <td>Irrelevant</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>Irrelevant</td>\n","      <td>this is actually a good move tot bring more vi...</td>\n","      <td>Irrelevant</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>Positive</td>\n","      <td>today sucked so its time to drink wine n play ...</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>Positive</td>\n","      <td>bought a fraction of microsoft today small wins</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>999</th>\n","      <td>Neutral</td>\n","      <td>johnson  johnson to stop selling talc baby pow...</td>\n","      <td>Neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc39eb26-8e34-4511-a703-e03e6b8878c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dc39eb26-8e34-4511-a703-e03e6b8878c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dc39eb26-8e34-4511-a703-e03e6b8878c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5f1db31e-e405-47f9-89d9-2162000ce262\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f1db31e-e405-47f9-89d9-2162000ce262')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5f1db31e-e405-47f9-89d9-2162000ce262 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1d46d29d-7117-4ee1-b080-6abb260c34b2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_df5')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1d46d29d-7117-4ee1-b080-6abb260c34b2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('text_df5');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"text_df5","summary":"{\n  \"name\": \"text_df5\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Positive\",\n          \"Irrelevant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 997,\n        \"samples\": [\n          \"man this some gta shit lol\",\n          \"hey verizon is there a known outage in\",\n          \"this is dope puff is such a great kid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Positive\",\n          \"Irrelevant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["# Text Test 데이터셋.csv 저장 및 불러와서 확인\n","text_df5.to_csv('01012345678_2.csv', index=False, encoding='utf-8')\n","text_df6 = pd.read_csv('01012345678_2.csv')\n","text_df6"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"gMaBaIzdQm25","outputId":"6fdeaef4-04ed-40ef-d699-5dd49b66839b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          label                                               text        pred\n","0    Irrelevant  i mentioned on facebook that i was struggling ...  Irrelevant\n","1       Neutral  bbc news  amazon boss jeff bezos rejects claim...     Neutral\n","2      Negative  microsoft why do i pay for word when it functi...    Negative\n","3      Negative  csgo matchmaking is so full of closet hacking ...    Negative\n","4       Neutral  now the president is slapping americans in the...     Neutral\n","..          ...                                                ...         ...\n","995  Irrelevant  toronto is the arts and culture capital of can...  Irrelevant\n","996  Irrelevant  this is actually a good move tot bring more vi...  Irrelevant\n","997    Positive  today sucked so its time to drink wine n play ...    Positive\n","998    Positive    bought a fraction of microsoft today small wins    Positive\n","999     Neutral  johnson  johnson to stop selling talc baby pow...     Neutral\n","\n","[1000 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-a7be1140-806e-4bd6-a7f9-839c36f10a90\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Irrelevant</td>\n","      <td>i mentioned on facebook that i was struggling ...</td>\n","      <td>Irrelevant</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Neutral</td>\n","      <td>bbc news  amazon boss jeff bezos rejects claim...</td>\n","      <td>Neutral</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Negative</td>\n","      <td>microsoft why do i pay for word when it functi...</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Negative</td>\n","      <td>csgo matchmaking is so full of closet hacking ...</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Neutral</td>\n","      <td>now the president is slapping americans in the...</td>\n","      <td>Neutral</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>Irrelevant</td>\n","      <td>toronto is the arts and culture capital of can...</td>\n","      <td>Irrelevant</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>Irrelevant</td>\n","      <td>this is actually a good move tot bring more vi...</td>\n","      <td>Irrelevant</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>Positive</td>\n","      <td>today sucked so its time to drink wine n play ...</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>Positive</td>\n","      <td>bought a fraction of microsoft today small wins</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>999</th>\n","      <td>Neutral</td>\n","      <td>johnson  johnson to stop selling talc baby pow...</td>\n","      <td>Neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7be1140-806e-4bd6-a7f9-839c36f10a90')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a7be1140-806e-4bd6-a7f9-839c36f10a90 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a7be1140-806e-4bd6-a7f9-839c36f10a90');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ddec97ea-00cc-4736-8038-83e06d198769\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddec97ea-00cc-4736-8038-83e06d198769')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ddec97ea-00cc-4736-8038-83e06d198769 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8dccb0d0-9ff7-42eb-a266-fe5b350e848c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_df6')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8dccb0d0-9ff7-42eb-a266-fe5b350e848c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('text_df6');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"text_df6","summary":"{\n  \"name\": \"text_df6\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Positive\",\n          \"Irrelevant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 997,\n        \"samples\": [\n          \"man this some gta shit lol\",\n          \"hey verizon is there a known outage in\",\n          \"this is dope puff is such a great kid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Neutral\",\n          \"Positive\",\n          \"Irrelevant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["# Text RandomForestClassifier 모델 저장\n","joblib.dump(text_rfc, '01012345678_2.joblib')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-_zB5VboQm0N","outputId":"da2fe1cd-2049-456d-93b1-70d542fc2035"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['01012345678_2.joblib']"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["# Text 모델 저장 잘 되었는지 불러와서 성능 확인\n","text_load_model = joblib.load('01012345678_2.joblib')\n","text_load_y_pred = text_load_model.predict(text_x_test_v)\n","text_cm = confusion_matrix(text_y_test, text_load_y_pred)\n","sns.heatmap(data=text_cm, annot=True, fmt='d', cmap='Blues')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"640w_-nqQmxY","outputId":"53c4a553-9747-4361-d34e-a96744c90e54"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# AICE Professional-3 Image 분류 모델 만들기"],"metadata":{"id":"AQ8Bpjf45FVp"}},{"cell_type":"code","source":["# github img 데이터셋 불러오기\n","!wget https://github.com/suku-7/AICE-Pro-share/raw/main/Flower_Classification_5class.zip"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aI9V1Th1S6nw","outputId":"d510b0fa-3df4-4948-bb30-e2a0c30b5516"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-03-31 13:31:07--  https://github.com/suku-7/AICE-Pro-share/raw/main/Flower_Classification_5class.zip\n","Resolving github.com (github.com)... 140.82.114.3\n","Connecting to github.com (github.com)|140.82.114.3|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://media.githubusercontent.com/media/suku-7/AICE-Pro-share/main/Flower_Classification_5class.zip [following]\n","--2025-03-31 13:31:07--  https://media.githubusercontent.com/media/suku-7/AICE-Pro-share/main/Flower_Classification_5class.zip\n","Resolving media.githubusercontent.com (media.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to media.githubusercontent.com (media.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 229731827 (219M) [application/zip]\n","Saving to: ‘Flower_Classification_5class.zip’\n","\n","Flower_Classificati 100%[===================>] 219.09M   264MB/s    in 0.8s    \n","\n","2025-03-31 13:31:35 (264 MB/s) - ‘Flower_Classification_5class.zip’ saved [229731827/229731827]\n","\n"]}]},{"cell_type":"code","source":["# Colab 환경에서 압축 파일 업로드했기에 사용한 부분입니다.\n","!unzip Flower_Classification_5class.zip -d /content/"],"metadata":{"id":"jRc-0avJLD0O","collapsed":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 시험에서는 압축을 별도로 풀지 않고 train과 test 이미지 경로를 바로 사용할 수 있도록 경로를 제공해줍니다.\n","# 예시1 : /content/flowers/train/\n","# 예시2 : /content/flowers/valid/\n","\n","# img flower_photos에 데이터셋 종류 확인\n","!ls -l /content/flowers/flowers/flower_photos"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0BydwDhBLHQ1","outputId":"fad7d2cb-d1e5-431b-eec6-51bb74333aa8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 12\n","drwxr-xr-x 7 root root 4096 Mar 31 13:32 test\n","drwxr-xr-x 7 root root 4096 Mar 31 13:32 train\n","drwxr-xr-x 7 root root 4096 Mar 31 13:32 validation\n"]}]},{"cell_type":"code","source":["# img jpg, jpeg, png, gif 뭐가 있는지 확인\n","# 다른 데이터셋중에는 jpg, jpeg가 혼합되어 사용된 경우가 있었어서 확인하게 되었습니다.\n","!ls -l /content/flowers/flowers/flower_photos/train/daisy | grep jpg | wc -l\n","!ls -l /content/flowers/flowers/flower_photos/train/daisy | grep jpeg | wc -l\n","!ls -l /content/flowers/flowers/flower_photos/train/daisy | grep png | wc -l\n","!ls -l /content/flowers/flowers/flower_photos/train/daisy | grep gif | wc -l"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XSJRuuNOVv2n","outputId":"89819a0b-79c4-4084-ba44-f1d23df603d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["607\n","0\n","0\n","0\n"]}]},{"cell_type":"code","source":["# img valid 데이터셋 폴더내 꽃 종류 확인\n","!ls -l /content/flowers/flowers/flower_photos/validation"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o8HA78ATV3Vw","outputId":"875e5e9f-346c-40c3-897d-fc1c2251ed39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 20\n","drwxr-xr-x 2 root root 4096 Mar 31 13:32 daisy\n","drwxr-xr-x 2 root root 4096 Mar 31 13:32 dandelion\n","drwxr-xr-x 2 root root 4096 Mar 31 13:32 roses\n","drwxr-xr-x 2 root root 4096 Mar 31 13:32 sunflowers\n","drwxr-xr-x 2 root root 4096 Mar 31 13:32 tulips\n"]}]},{"cell_type":"code","source":["# img test 데이터셋 폴더내 daisy 갯수 및 이미지 풀네임 확인\n","!ls -l /content/flowers/flowers/flower_photos/test/daisy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SDJcORp9V94_","outputId":"a111c061-7c11-4493-ec42-ba28d2031557"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 396\n","-rw-r--r-- 1 root root 36410 Apr 18  2021 10172379554_b296050f82_n.jpg\n","-rw-r--r-- 1 root root 24463 Apr 18  2021 1306119996_ab8ae14d72_n.jpg\n","-rw-r--r-- 1 root root 31422 Apr 18  2021 134409839_71069a95d1_m.jpg\n","-rw-r--r-- 1 root root 24030 Apr 18  2021 19813618946_93818db7aa_m.jpg\n","-rw-r--r-- 1 root root 17466 Apr 18  2021 3338077096_3a8ed0e2bc_m.jpg\n","-rw-r--r-- 1 root root 15072 Apr 18  2021 3552074420_2a0a7166db_m.jpg\n","-rw-r--r-- 1 root root 70320 Apr 18  2021 4141147800_813f660b47.jpg\n","-rw-r--r-- 1 root root 43385 Apr 18  2021 538920244_59899a78f8_n.jpg\n","-rw-r--r-- 1 root root 40516 Apr 18  2021 5973488341_50bdf6cee3_n.jpg\n","-rw-r--r-- 1 root root 86338 Apr 18  2021 8446495985_f72d851482.jpg\n"]}]},{"cell_type":"code","source":["# img train, valid 경로 지정\n","train_img_path = '/content/flowers/flowers/flower_photos/train/'\n","valid_img_path = '/content/flowers/flowers/flower_photos/validation/'"],"metadata":{"id":"jovAfC9FV-3Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","지금은 train 데이터셋, valid 데이터셋이 제공되어서 train-train, valid-valid를 사용했습니다.\n","train 데이터셋 하나만 제공되는 경우에는 valid 데이터셋을 만들기 위해서는\n","directory, validation_split, subset을 아래처럼 수정해주시면 됩니다.\n","\n","train\n","directory=train_img_path,\n","validation_split=0.2,\n","subset='training'\n","\n","valid\n","directory=train_img_path,\n","validation_split=0.2,\n","subset='validation'\n","\n","\"\"\"\n","\n","# img train dataset 만들기\n","train_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n","    directory=train_img_path,\n","    labels='inferred',\n","    #class_names=['cats', 'dogs'],\n","    label_mode='categorical',\n","    color_mode='rgb',\n","    batch_size=32,\n","    image_size=(224,224),\n","    seed=42,\n","    shuffle=True,\n","    #validation_split=0.2,\n","    #subset='training'\n",")\n","# img valid dataset 만들기\n","valid_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n","    directory=valid_img_path,\n","    labels='inferred',\n","    #class_names=['cats', 'dogs'],\n","    label_mode='categorical',\n","    color_mode='rgb',\n","    batch_size=32,\n","    image_size=(224,224),\n","    seed=42,\n","    shuffle=True,\n","    #validation_split=0.2,\n","    #subset='validation'\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yhXbPxDcWGbn","outputId":"278596d9-631d-4e27-a060-a6b82e7d05a2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 3540 files belonging to 5 classes.\n","Found 80 files belonging to 5 classes.\n"]}]},{"cell_type":"code","source":["# img 사전학습 모델인 MobileNetV3Large 사용\n","# 이미지 사이즈는 사전 학습된 모델 호환성 – 많은 딥러닝 모델(VGG16, ResNet 등)이\n","# 224x224 크기의 이미지를 입력으로 사용하도록 학습되었기 때문에 이렇게 사용했습니다.\n","img_base_model = tf.keras.applications.MobileNetV3Large(input_shape=(224,224,3), weights='imagenet', include_top=False)\n","img_base_model.trainable=False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rteXVOohWbTQ","outputId":"5671ace7-109e-4cfe-c77c-ade1b2b99c0c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v3/weights_mobilenet_v3_large_224_1.0_float_no_top_v2.h5\n","\u001b[1m12683000/12683000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}]},{"cell_type":"code","source":["# img dataset의 라벨 갯수 확인용 (5개)\n","train_dataset.class_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vWiuXRIKW3Oh","outputId":"6e1f9156-b451-48eb-a4f8-606dd231689b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["# img 딥러닝 모델 제작\n","img_model = Sequential()\n","img_model.add(img_base_model)\n","img_model.add(Flatten())\n","img_model.add(Dense(256, activation=None))\n","img_model.add(BatchNormalization())\n","img_model.add(Activation('relu'))\n","img_model.add(Dropout(0.5))\n","img_model.add(Dense(5, activation='softmax'))"],"metadata":{"id":"dn3G6KtLWn5P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#img 딥러닝 모델 compile\n","img_model.compile(\n","    optimizer=tf.keras.optimizers.Adam(0.001),\n","    loss='categorical_crossentropy',\n","    metrics=['accuracy']\n",")"],"metadata":{"id":"_XUH_jYPW6bp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# img 딥러닝 모델 훈련 fit\n","# img는 es3, mc3, history3 처럼 변수에 3을 붙여서 사용했습니다.\n","# 같은 코드 안에서 3개의 모델을 만들어서 비슷한 변수명에 숫자나, text, img를 붙였습니다.\n","\n","es3 = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True, verbose=1)\n","mc3 = ModelCheckpoint('best_img_model.keras', monitor='val_loss', save_best_only=True, verbose=1)\n","\n","history3 = img_model.fit(\n","    train_dataset,\n","    epochs=10,\n","    validation_data=valid_dataset,\n","    callbacks=[es3, mc3],\n","    verbose=1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bUK6KJoXAZB","outputId":"a5f46d16-8a9c-4855-e00b-c50fc392be6f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 106ms/step - accuracy: 0.7627 - loss: 0.6905\n","Epoch 1: val_loss improved from inf to 0.45077, saving model to best_img_model.keras\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 226ms/step - accuracy: 0.7633 - loss: 0.6887 - val_accuracy: 0.8750 - val_loss: 0.4508\n","Epoch 2/10\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 50ms/step - accuracy: 0.9672 - loss: 0.1219\n","Epoch 2: val_loss improved from 0.45077 to 0.32265, saving model to best_img_model.keras\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 64ms/step - accuracy: 0.9673 - loss: 0.1216 - val_accuracy: 0.9125 - val_loss: 0.3227\n","Epoch 3/10\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 0.9937 - loss: 0.0397\n","Epoch 3: val_loss improved from 0.32265 to 0.30810, saving model to best_img_model.keras\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 102ms/step - accuracy: 0.9937 - loss: 0.0396 - val_accuracy: 0.9125 - val_loss: 0.3081\n","Epoch 4/10\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 51ms/step - accuracy: 0.9976 - loss: 0.0248\n","Epoch 4: val_loss did not improve from 0.30810\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 53ms/step - accuracy: 0.9976 - loss: 0.0247 - val_accuracy: 0.9125 - val_loss: 0.3128\n","Epoch 5/10\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.9989 - loss: 0.0130\n","Epoch 5: val_loss did not improve from 0.30810\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 47ms/step - accuracy: 0.9989 - loss: 0.0130 - val_accuracy: 0.8750 - val_loss: 0.3702\n","Epoch 6/10\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 55ms/step - accuracy: 0.9991 - loss: 0.0098\n","Epoch 6: val_loss did not improve from 0.30810\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 57ms/step - accuracy: 0.9991 - loss: 0.0098 - val_accuracy: 0.8750 - val_loss: 0.4173\n","Epoch 7/10\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 55ms/step - accuracy: 0.9991 - loss: 0.0102\n","Epoch 7: val_loss did not improve from 0.30810\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 56ms/step - accuracy: 0.9991 - loss: 0.0102 - val_accuracy: 0.8750 - val_loss: 0.4203\n","Epoch 8/10\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.9996 - loss: 0.0064\n","Epoch 8: val_loss did not improve from 0.30810\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 48ms/step - accuracy: 0.9996 - loss: 0.0063 - val_accuracy: 0.9125 - val_loss: 0.3893\n","Epoch 8: early stopping\n","Restoring model weights from the end of the best epoch: 3.\n"]}]},{"cell_type":"code","source":["# 시험에서는 csv 파일에 image 파일명이 제공되지만,\n","# 현재의 환경처럼 csv 파일이 없는 경우 시험 환경과 비슷하게 하기 위해 파일을 만드는 부분입니다.\n","# 시험에서는 이 부분은 사용하지 않으셔도 될겁니다.\n","\n","img_glob = sorted(glob.glob('/content/flowers/flowers/flower_photos/test/*/*jpg'))\n","img_file = [os.path.basename(path) for path in img_glob]\n","img_label = [os.path.basename(os.path.dirname(path)) for path in img_glob]\n","\n","# img Test 데이터셋을 이용해서 DataFrame 만들기\n","img_df5 = pd.DataFrame()\n","img_df5['image'] = img_glob\n","img_df5['file'] = img_file\n","img_df5['label'] = img_label\n","img_df5.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"fLU46Sy6XPXu","outputId":"e695b8fd-6188-4ccd-a5da-d6b22260a078"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               image  \\\n","0  /content/flowers/flowers/flower_photos/test/da...   \n","1  /content/flowers/flowers/flower_photos/test/da...   \n","2  /content/flowers/flowers/flower_photos/test/da...   \n","3  /content/flowers/flowers/flower_photos/test/da...   \n","4  /content/flowers/flowers/flower_photos/test/da...   \n","5  /content/flowers/flowers/flower_photos/test/da...   \n","6  /content/flowers/flowers/flower_photos/test/da...   \n","7  /content/flowers/flowers/flower_photos/test/da...   \n","8  /content/flowers/flowers/flower_photos/test/da...   \n","9  /content/flowers/flowers/flower_photos/test/da...   \n","\n","                           file  label  \n","0  10172379554_b296050f82_n.jpg  daisy  \n","1   1306119996_ab8ae14d72_n.jpg  daisy  \n","2    134409839_71069a95d1_m.jpg  daisy  \n","3  19813618946_93818db7aa_m.jpg  daisy  \n","4   3338077096_3a8ed0e2bc_m.jpg  daisy  \n","5   3552074420_2a0a7166db_m.jpg  daisy  \n","6     4141147800_813f660b47.jpg  daisy  \n","7    538920244_59899a78f8_n.jpg  daisy  \n","8   5973488341_50bdf6cee3_n.jpg  daisy  \n","9     8446495985_f72d851482.jpg  daisy  "],"text/html":["\n","  <div id=\"df-87142cee-03f0-457e-9581-c0c061c1ae90\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image</th>\n","      <th>file</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>10172379554_b296050f82_n.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>1306119996_ab8ae14d72_n.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>134409839_71069a95d1_m.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>19813618946_93818db7aa_m.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3338077096_3a8ed0e2bc_m.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3552074420_2a0a7166db_m.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>4141147800_813f660b47.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>538920244_59899a78f8_n.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>5973488341_50bdf6cee3_n.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>8446495985_f72d851482.jpg</td>\n","      <td>daisy</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87142cee-03f0-457e-9581-c0c061c1ae90')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-87142cee-03f0-457e-9581-c0c061c1ae90 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-87142cee-03f0-457e-9581-c0c061c1ae90');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ccb7777b-3761-42e7-a94e-9547e17615a4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ccb7777b-3761-42e7-a94e-9547e17615a4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ccb7777b-3761-42e7-a94e-9547e17615a4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"img_df5","summary":"{\n  \"name\": \"img_df5\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"image\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"/content/flowers/flowers/flower_photos/test/dandelion/2517777524_e871ec5291_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/40411019_526f3fc8d9_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"2517777524_e871ec5291_m.jpg\",\n          \"40411019_526f3fc8d9_m.jpg\",\n          \"20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"dandelion\",\n          \"tulips\",\n          \"roses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["# img train dataset 라벨이 어떤게 들어있는지 확인\n","# imagedataset labels='inferred'를 설정해서 만들었기 때문에 a-z순으로 자동 저장됩니다.\n","# label의 순서를 임의로 조정해야한다면, 위의 imagedataset labels=None, Class_names=['cats', 'dogs']를 적으시면 됩니다.\n","\n","train_dataset.class_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KEiNJ8_VXwE-","outputId":"668d86dd-8537-4bc6-dc34-51c49cae84b9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","source":["# 예측값 저장용 변수\n","img_predictions = []\n","# img test 데이터셋 폴더 경로\n","img_folder = '/content/flowers/flowers/flower_photos/test/'\n","# test 데이터셋 라벨 인코딩용 변수\n","img_label_to_class = {\n","    0:'daisy',\n","    1:'dandelion',\n","    2:'roses',\n","    3:'sunflowers',\n","    4:'tulips'\n","}\n","\n","\"\"\"\n","시험에서는 csv를 '파일 경로+이미지'가 아니라 '이미지명'만 줬던거로 기억합니다.\n","img_folder 경로를 지정하고 img_path = os.path.join(img_folder, row['file'])\n","즉 폴더 경로 + 이미지명.jpg로만 사용해서 시험에서는 분류가 가능하지만\n","현재의 테스트 데이터셋은 Test/Daisy/이미지 상태로\n","시험의 테스트 데이터셋은 Test/이미지\n","와 다르게 꽃의 이름과 같은 하위 폴더가 있어서, 임의로 만든 row['image']이미지의 모든 경로를 사용합니다.\n","\n","1. 위의 코드인 이미지의 경로를 확인해서 테스트 데이터셋 img_df5.csv를 만드는 방법\n","2. 이미지 폴더경로 + 이미지명 / img_df5['file'] 분류\n","3. 이미지 모든경로 / img_df5['image']로 분류\n","2번 방법만 알아도 시험을 보는데는 문제가 없을거로 생각되지만 변경사항이 있을 수 있으니\n","모두 다 사용방법을 다 숙달하고 외워서 가시는걸 추천드립니다.\n","이거는 다른거처럼 문법 레퍼런스를 보고 사용하는게 불가능해서 중점적으로 코드 연습을 했던 부분입니다.\n","\n","\"\"\"\n","\n","# 이미지를 한개씩 띄우고 예측한 값과 이미지명을 알려줍니다.\n","# img_df5.csv 기준 위에서 부터 순서대로 모델을 예측하고 분류해줍니다.\n","for i, row in img_df5.iterrows():\n","  img_path = row['image']\n","  #img_path = os.path.join(img_folder, row['file'])\n","  img = tf.keras.utils.load_img(img_path, target_size=(224,224))\n","  img_array = tf.keras.utils.img_to_array(img)\n","  img_array = np.expand_dims(img_array, axis=0)\n","\n","  img_pred_t = img_model.predict(img_array, verbose=0)\n","  img_pred_label = np.argmax(img_pred_t)\n","  img_pred_class = img_label_to_class.get(img_pred_label, 'None')\n","  img_predictions.append(img_pred_label)\n","\n","  plt.imshow(img)\n","  plt.title(f'Predict : {img_pred_label}({img_pred_class}) \\n {os.path.basename(img_path)}')\n","  plt.axis('off')\n","  plt.show()"],"metadata":{"id":"JNeOLiC2XkYx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# img 모델의 예측값을 csv파일에 추가해줍니다.\n","img_df5['pred'] = img_predictions\n","img_df5.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"J31elo3gYd7f","outputId":"fb94136f-9edd-49d4-ef5f-14abac52fd05"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               image  \\\n","0  /content/flowers/flowers/flower_photos/test/da...   \n","1  /content/flowers/flowers/flower_photos/test/da...   \n","2  /content/flowers/flowers/flower_photos/test/da...   \n","3  /content/flowers/flowers/flower_photos/test/da...   \n","4  /content/flowers/flowers/flower_photos/test/da...   \n","5  /content/flowers/flowers/flower_photos/test/da...   \n","6  /content/flowers/flowers/flower_photos/test/da...   \n","7  /content/flowers/flowers/flower_photos/test/da...   \n","8  /content/flowers/flowers/flower_photos/test/da...   \n","9  /content/flowers/flowers/flower_photos/test/da...   \n","\n","                           file  label  pred  \n","0  10172379554_b296050f82_n.jpg  daisy     0  \n","1   1306119996_ab8ae14d72_n.jpg  daisy     0  \n","2    134409839_71069a95d1_m.jpg  daisy     0  \n","3  19813618946_93818db7aa_m.jpg  daisy     0  \n","4   3338077096_3a8ed0e2bc_m.jpg  daisy     0  \n","5   3552074420_2a0a7166db_m.jpg  daisy     0  \n","6     4141147800_813f660b47.jpg  daisy     0  \n","7    538920244_59899a78f8_n.jpg  daisy     0  \n","8   5973488341_50bdf6cee3_n.jpg  daisy     0  \n","9     8446495985_f72d851482.jpg  daisy     0  "],"text/html":["\n","  <div id=\"df-e29302b5-0e59-4d14-98fe-cffb1549ec37\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image</th>\n","      <th>file</th>\n","      <th>label</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>10172379554_b296050f82_n.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>1306119996_ab8ae14d72_n.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>134409839_71069a95d1_m.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>19813618946_93818db7aa_m.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3338077096_3a8ed0e2bc_m.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3552074420_2a0a7166db_m.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>4141147800_813f660b47.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>538920244_59899a78f8_n.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>5973488341_50bdf6cee3_n.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>8446495985_f72d851482.jpg</td>\n","      <td>daisy</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e29302b5-0e59-4d14-98fe-cffb1549ec37')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e29302b5-0e59-4d14-98fe-cffb1549ec37 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e29302b5-0e59-4d14-98fe-cffb1549ec37');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f25f54a7-9402-4f0a-89d2-77b41bc891b0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f25f54a7-9402-4f0a-89d2-77b41bc891b0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f25f54a7-9402-4f0a-89d2-77b41bc891b0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"img_df5","summary":"{\n  \"name\": \"img_df5\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"image\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"/content/flowers/flowers/flower_photos/test/dandelion/2517777524_e871ec5291_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/40411019_526f3fc8d9_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"2517777524_e871ec5291_m.jpg\",\n          \"40411019_526f3fc8d9_m.jpg\",\n          \"20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"dandelion\",\n          \"tulips\",\n          \"roses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["# img 예측한 값의 라벨을 수정해줍니다.\n","img_df5['pred'] = img_df5['pred'].map(img_label_to_class)\n","img_df5.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"_jZN-Of0YvDx","outputId":"78a2a53f-e493-427d-cac9-dabd7a867156"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               image  \\\n","0  /content/flowers/flowers/flower_photos/test/da...   \n","1  /content/flowers/flowers/flower_photos/test/da...   \n","2  /content/flowers/flowers/flower_photos/test/da...   \n","3  /content/flowers/flowers/flower_photos/test/da...   \n","4  /content/flowers/flowers/flower_photos/test/da...   \n","5  /content/flowers/flowers/flower_photos/test/da...   \n","6  /content/flowers/flowers/flower_photos/test/da...   \n","7  /content/flowers/flowers/flower_photos/test/da...   \n","8  /content/flowers/flowers/flower_photos/test/da...   \n","9  /content/flowers/flowers/flower_photos/test/da...   \n","\n","                           file  label   pred  \n","0  10172379554_b296050f82_n.jpg  daisy  daisy  \n","1   1306119996_ab8ae14d72_n.jpg  daisy  daisy  \n","2    134409839_71069a95d1_m.jpg  daisy  daisy  \n","3  19813618946_93818db7aa_m.jpg  daisy  daisy  \n","4   3338077096_3a8ed0e2bc_m.jpg  daisy  daisy  \n","5   3552074420_2a0a7166db_m.jpg  daisy  daisy  \n","6     4141147800_813f660b47.jpg  daisy  daisy  \n","7    538920244_59899a78f8_n.jpg  daisy  daisy  \n","8   5973488341_50bdf6cee3_n.jpg  daisy  daisy  \n","9     8446495985_f72d851482.jpg  daisy  daisy  "],"text/html":["\n","  <div id=\"df-2b075a43-5cdb-4a39-b181-7b5810969ed8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image</th>\n","      <th>file</th>\n","      <th>label</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>10172379554_b296050f82_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>1306119996_ab8ae14d72_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>134409839_71069a95d1_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>19813618946_93818db7aa_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3338077096_3a8ed0e2bc_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3552074420_2a0a7166db_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>4141147800_813f660b47.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>538920244_59899a78f8_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>5973488341_50bdf6cee3_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>8446495985_f72d851482.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b075a43-5cdb-4a39-b181-7b5810969ed8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2b075a43-5cdb-4a39-b181-7b5810969ed8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2b075a43-5cdb-4a39-b181-7b5810969ed8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ede81e2f-87c1-4b0f-b8fe-d58cf12f2ef9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ede81e2f-87c1-4b0f-b8fe-d58cf12f2ef9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ede81e2f-87c1-4b0f-b8fe-d58cf12f2ef9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"img_df5","summary":"{\n  \"name\": \"img_df5\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"image\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"/content/flowers/flowers/flower_photos/test/dandelion/2517777524_e871ec5291_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/40411019_526f3fc8d9_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"2517777524_e871ec5291_m.jpg\",\n          \"40411019_526f3fc8d9_m.jpg\",\n          \"20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"dandelion\",\n          \"tulips\",\n          \"roses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"dandelion\",\n          \"sunflowers\",\n          \"roses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["# img 모델의 성능은 0.86이 나왔네요\n","# 시험에서는 테스트 데이터셋의 라벨이 없기 때문에 불필요한 부분입니다.\n","img_correct_count = sum(img_df5['label']==img_df5['pred'])\n","img_total_count = len(img_df5)\n","img_model_accuracy = img_correct_count/img_total_count\n","print(f'img_model_accuracy : {img_model_accuracy:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0lhiTiRfYvBe","outputId":"90723fae-07d5-49ed-e607-c51377c19883"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["img_model_accuracy : 0.86\n"]}]},{"cell_type":"code","source":["# img 테스트 데이터셋.csv를 저장합니다.\n","img_df5.to_csv('01012345678_3.csv', index=False, encoding='utf-8')\n","img_df6 = pd.read_csv('01012345678_3.csv')\n","img_df6.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"MqhKw5CQYm-J","outputId":"1f518356-fe56-4aac-f68e-b6309acfecb7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               image  \\\n","0  /content/flowers/flowers/flower_photos/test/da...   \n","1  /content/flowers/flowers/flower_photos/test/da...   \n","2  /content/flowers/flowers/flower_photos/test/da...   \n","3  /content/flowers/flowers/flower_photos/test/da...   \n","4  /content/flowers/flowers/flower_photos/test/da...   \n","5  /content/flowers/flowers/flower_photos/test/da...   \n","6  /content/flowers/flowers/flower_photos/test/da...   \n","7  /content/flowers/flowers/flower_photos/test/da...   \n","8  /content/flowers/flowers/flower_photos/test/da...   \n","9  /content/flowers/flowers/flower_photos/test/da...   \n","\n","                           file  label   pred  \n","0  10172379554_b296050f82_n.jpg  daisy  daisy  \n","1   1306119996_ab8ae14d72_n.jpg  daisy  daisy  \n","2    134409839_71069a95d1_m.jpg  daisy  daisy  \n","3  19813618946_93818db7aa_m.jpg  daisy  daisy  \n","4   3338077096_3a8ed0e2bc_m.jpg  daisy  daisy  \n","5   3552074420_2a0a7166db_m.jpg  daisy  daisy  \n","6     4141147800_813f660b47.jpg  daisy  daisy  \n","7    538920244_59899a78f8_n.jpg  daisy  daisy  \n","8   5973488341_50bdf6cee3_n.jpg  daisy  daisy  \n","9     8446495985_f72d851482.jpg  daisy  daisy  "],"text/html":["\n","  <div id=\"df-60cc2629-6d6f-4536-8299-b9f82d535a78\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image</th>\n","      <th>file</th>\n","      <th>label</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>10172379554_b296050f82_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>1306119996_ab8ae14d72_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>134409839_71069a95d1_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>19813618946_93818db7aa_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3338077096_3a8ed0e2bc_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>3552074420_2a0a7166db_m.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>4141147800_813f660b47.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>538920244_59899a78f8_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>5973488341_50bdf6cee3_n.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>/content/flowers/flowers/flower_photos/test/da...</td>\n","      <td>8446495985_f72d851482.jpg</td>\n","      <td>daisy</td>\n","      <td>daisy</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60cc2629-6d6f-4536-8299-b9f82d535a78')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-60cc2629-6d6f-4536-8299-b9f82d535a78 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-60cc2629-6d6f-4536-8299-b9f82d535a78');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b774b631-8548-4520-b289-2a1306909265\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b774b631-8548-4520-b289-2a1306909265')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b774b631-8548-4520-b289-2a1306909265 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"img_df6","summary":"{\n  \"name\": \"img_df6\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"image\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"/content/flowers/flowers/flower_photos/test/dandelion/2517777524_e871ec5291_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/40411019_526f3fc8d9_m.jpg\",\n          \"/content/flowers/flowers/flower_photos/test/sunflowers/20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"2517777524_e871ec5291_m.jpg\",\n          \"40411019_526f3fc8d9_m.jpg\",\n          \"20342824594_9740b7b160.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"dandelion\",\n          \"tulips\",\n          \"roses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"dandelion\",\n          \"sunflowers\",\n          \"roses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":106}]},{"cell_type":"code","source":["# img 딥러닝 모델을 저장해줍니다.\n","img_model.save('01012345678_3.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qHJ9smlbYkX5","outputId":"3c76cf08-4fd8-4a55-e469-faad7aab2de8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}]},{"cell_type":"code","source":["# 수고하셨습니다! 코드 내용과 csv, 모델 저장등을 검토 하고서 최종 제출 누르시면 됩니다.\n"],"metadata":{"id":"t9U5xs-KZddD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7MBGAh0FaxRY"},"execution_count":null,"outputs":[]}]}